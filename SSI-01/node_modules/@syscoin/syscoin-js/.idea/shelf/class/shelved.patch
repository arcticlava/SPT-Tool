Index: dist/rpcServices.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Object.defineProperty(exports, \"__esModule\", { value: true });\nfunction rpcServices(callRpc) {\n    return {\n        // @formatter:off\n        // == Blockchain ==\n        getBestBlockHash: function () { return callThroughToRpc(arguments); },\n        getBlock: function (_a) {\n            var blockHash = _a.blockHash, verbosity = _a.verbosity;\n            return callThroughToRpc(arguments);\n        },\n        getBlockchainInfo: function () { return callThroughToRpc(arguments); },\n        getBlockCount: function () { return callThroughToRpc(arguments); },\n        getBlockFilter: function (_a) {\n            var blockHash = _a.blockHash, filterType = _a.filterType;\n            return callThroughToRpc(arguments);\n        },\n        getBlockHash: function (_a) {\n            var height = _a.height;\n            return callThroughToRpc(arguments);\n        },\n        getBlockHeader: function (_a) {\n            var blockHash = _a.blockHash, verbose = _a.verbose;\n            return callThroughToRpc(arguments);\n        },\n        getBlockStats: function (_a) {\n            var hashOrHeight = _a.hashOrHeight, stats = _a.stats;\n            return callThroughToRpc(arguments);\n        },\n        getChainTips: function (_a) {\n            var count = _a.count, branchLength = _a.branchLength;\n            return callThroughToRpc(arguments);\n        },\n        getChainTxStats: function (_a) {\n            var nBlocks = _a.nBlocks, blockHash = _a.blockHash;\n            return callThroughToRpc(arguments);\n        },\n        getDifficulty: function () { return callThroughToRpc(arguments); },\n        getMemPoolAncestors: function (_a) {\n            var txid = _a.txid, verbose = _a.verbose;\n            return callThroughToRpc(arguments);\n        },\n        getMemPoolDescendants: function (_a) {\n            var txid = _a.txid, verbose = _a.verbose;\n            return callThroughToRpc(arguments);\n        },\n        getMemPoolEntry: function (_a) {\n            var txid = _a.txid;\n            return callThroughToRpc(arguments);\n        },\n        getMemPoolInfo: function () { return callThroughToRpc(arguments); },\n        getRawMemPool: function (_a) {\n            var verbose = _a.verbose;\n            return callThroughToRpc(arguments);\n        },\n        getTxOut: function (_a) {\n            var txid = _a.txid, voutNumber = _a.voutNumber, includeMempool = _a.includeMempool;\n            return callThroughToRpc(arguments);\n        },\n        getTxOutProof: function (_a) {\n            var txids = _a.txids, blockHash = _a.blockHash;\n            return callThroughToRpc(arguments);\n        },\n        getTxOutSetInfo: function () { return callThroughToRpc(arguments); },\n        preciousBlock: function (_a) {\n            var blockHash = _a.blockHash;\n            return callThroughToRpc(arguments);\n        },\n        pruneBlockchain: function (_a) {\n            var blockHeight = _a.blockHeight;\n            return callThroughToRpc(arguments);\n        },\n        saveMemPool: function () { return callThroughToRpc(arguments); },\n        scanTxOutSet: function (_a) {\n            var action = _a.action, scanObjects = _a.scanObjects;\n            return callThroughToRpc(arguments);\n        },\n        verifyChain: function (_a) {\n            var checkLevel = _a.checkLevel, numberOfBlocksToCheck = _a.numberOfBlocksToCheck;\n            return callThroughToRpc(arguments);\n        },\n        verifyTxOutProof: function (_a) {\n            var proof = _a.proof;\n            return callThroughToRpc(arguments);\n        },\n        // == Control ==\n        getMemoryInfo: function (_a) {\n            var mode = _a.mode;\n            return callThroughToRpc(arguments);\n        },\n        getRpcInfo: function () { return callThroughToRpc(arguments); },\n        help: function (_a) {\n            var command = _a.command;\n            return callThroughToRpc(arguments);\n        },\n        logging: function (_a) {\n            var includeCategories = _a.includeCategories, excludeCategories = _a.excludeCategories;\n            return callThroughToRpc(arguments);\n        },\n        stop: function () { return callThroughToRpc(arguments); },\n        uptime: function () { return callThroughToRpc(arguments); },\n        // == Generating ==\n        generate: function (_a) {\n            var numberOfBlocks = _a.numberOfBlocks, maxTries = _a.maxTries;\n            return callThroughToRpc(arguments);\n        },\n        generateToAddress: function (_a) {\n            var numberOfBlocks = _a.numberOfBlocks, address = _a.address, maxTries = _a.maxTries;\n            return callThroughToRpc(arguments);\n        },\n        // == Mining ==\n        createAuxBlock: function (_a) {\n            var address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        getAuxBlock: function (_a) {\n            var blockHash = _a.blockHash, auxPow = _a.auxPow;\n            return callThroughToRpc(arguments);\n        },\n        getBlockTemplate: function (_a) {\n            var blockTemplate = _a.blockTemplate;\n            return callThroughToRpc(arguments);\n        },\n        getMiningInfo: function () { return callThroughToRpc(arguments); },\n        getNetworkHashesPerSecond: function (_a) {\n            var numberOfBlocks = _a.numberOfBlocks, blockHeight = _a.blockHeight;\n            return callThroughToRpc(arguments);\n        },\n        prioritiseTransaction: function (_a) {\n            var txid = _a.txid, dummy = _a.dummy, feeDeltaInSatoshis = _a.feeDeltaInSatoshis;\n            return callThroughToRpc(arguments);\n        },\n        submitAuxBlock: function (_a) {\n            var blockHash = _a.blockHash, auxPow = _a.auxPow;\n            return callThroughToRpc(arguments);\n        },\n        submitBlock: function (_a) {\n            var hexDataToSubmit = _a.hexDataToSubmit;\n            return callThroughToRpc(arguments);\n        },\n        submitHeader: function (_a) {\n            var hexData = _a.hexData;\n            return callThroughToRpc(arguments);\n        },\n        // == Network ==\n        addNode: function (_a) {\n            var nodeAddress = _a.nodeAddress;\n            return callThroughToRpc(arguments);\n        },\n        clearBanned: function () { return callThroughToRpc(arguments); },\n        disconnectNode: function (_a) {\n            var nodeAddress = _a.nodeAddress, nodeId = _a.nodeId;\n            return callThroughToRpc(arguments);\n        },\n        getAddedNodeInfo: function (_a) {\n            var nodeAddress = _a.nodeAddress;\n            return callThroughToRpc(arguments);\n        },\n        getConnectionCount: function () { return callThroughToRpc(arguments); },\n        getNetTotals: function () { return callThroughToRpc(arguments); },\n        getNetworkInfo: function () { return callThroughToRpc(arguments); },\n        getNodeAddresses: function () { return callThroughToRpc(arguments); },\n        getPeerInfo: function () { return callThroughToRpc(arguments); },\n        getInfo: function () { return callThroughToRpc(arguments); },\n        listBanned: function () { return callThroughToRpc(arguments); },\n        ping: function () { return callThroughToRpc(arguments); },\n        setBan: function (_a) {\n            var subnet = _a.subnet, command = _a.command, banTime = _a.banTime;\n            return callThroughToRpc(arguments);\n        },\n        // == Rawtransactions ==\n        analyzePsbt: function (_a) {\n            var pbst = _a.pbst;\n            return callThroughToRpc(arguments);\n        },\n        combinePsbt: function (_a) {\n            var pbsts = _a.pbsts;\n            return callThroughToRpc(arguments);\n        },\n        combineRawTransaction: function (_a) {\n            var hexs = _a.hexs;\n            return callThroughToRpc(arguments);\n        },\n        convertToPsbt: function (_a) {\n            var hex = _a.hex, permitSigData = _a.permitSigData, isWitness = _a.isWitness;\n            return callThroughToRpc(arguments);\n        },\n        createPsbt: function (_a) {\n            var txHeaders = _a.txHeaders, payloadInfo = _a.payloadInfo, locktime = _a.locktime, replaceable = _a.replaceable;\n            return callThroughToRpc(arguments);\n        },\n        createRawTransaction: function (_a) {\n            var txHeaders = _a.txHeaders, payloadInfo = _a.payloadInfo, locktime = _a.locktime, replaceable = _a.replaceable;\n            return callThroughToRpc(arguments);\n        },\n        decodePsbt: function (_a) {\n            var pbst = _a.pbst;\n            return callThroughToRpc(arguments);\n        },\n        decodeRawTransaction: function (_a) {\n            var hexString = _a.hexString, isWitness = _a.isWitness;\n            return callThroughToRpc(arguments);\n        },\n        decodeScript: function (_a) {\n            var hexString = _a.hexString;\n            return callThroughToRpc(arguments);\n        },\n        finalizePsbt: function (_a) {\n            var pbst = _a.pbst, extract = _a.extract;\n            return callThroughToRpc(arguments);\n        },\n        fundRawTransaction: function (_a) {\n            var hexString = _a.hexString, options = _a.options, isWitness = _a.isWitness;\n            return callThroughToRpc(arguments);\n        },\n        getRawTransaction: function (_a) {\n            var txid = _a.txid, verbose = _a.verbose, blockHash = _a.blockHash;\n            return callThroughToRpc(arguments);\n        },\n        joinPsbts: function (_a) {\n            var pbsts = _a.pbsts;\n            return callThroughToRpc(arguments);\n        },\n        sendRawTransaction: function (_a) {\n            var hexString = _a.hexString, maxFeeRate = _a.maxFeeRate;\n            return callThroughToRpc(arguments);\n        },\n        signRawTransactionWithKey: function (_a) {\n            var hexString = _a.hexString, privateKeys = _a.privateKeys, txs = _a.txs, sigHashType = _a.sigHashType;\n            return callThroughToRpc(arguments);\n        },\n        testMempoolAccept: function (_a) {\n            var rawTxs = _a.rawTxs, maxFeeRate = _a.maxFeeRate;\n            return callThroughToRpc(arguments);\n        },\n        utxoUpdatePsbt: function (_a) {\n            var pbst = _a.pbst;\n            return callThroughToRpc(arguments);\n        },\n        // == Syscoin ==\n        addressBalance: function (_a) {\n            var address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        assetAllocationBalance: function (_a) {\n            var assetGuid = _a.assetGuid, address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        assetAllocationBurn: function (_a) {\n            var assetGuid = _a.assetGuid, address = _a.address, amount = _a.amount, ethAddress = _a.ethAddress;\n            return callThroughToRpc(arguments);\n        },\n        assetAllocationInfo: function (_a) {\n            var assetGuid = _a.assetGuid, address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        assetAllocationLock: function (_a) {\n            var assetGuid = _a.assetGuid, addressFrom = _a.addressFrom, txid = _a.txid, outputIndex = _a.outputIndex, witness = _a.witness;\n            return callThroughToRpc(arguments);\n        },\n        assetAllocationMint: function (_a) {\n            var assetGuid = _a.assetGuid, address = _a.address, amount = _a.amount, blockNum = _a.blockNum, txHex = _a.txHex, txRootHex = _a.txRootHex, merkleProofHex = _a.merkleProofHex, merkleProofPathHex = _a.merkleProofPathHex, witness = _a.witness;\n            return callThroughToRpc(arguments);\n        },\n        assetAllocationSend: function (_a) {\n            var assetGuid = _a.assetGuid, addressFrom = _a.addressFrom, addressTo = _a.addressTo, amount = _a.amount;\n            return callThroughToRpc(arguments);\n        },\n        assetAllocationSenderStatus: function (_a) {\n            var assetGuid = _a.assetGuid, address = _a.address, txid = _a.txid;\n            return callThroughToRpc(arguments);\n        },\n        assetAllocationSendMany: function (_a) {\n            var assetGuid = _a.assetGuid, addressFrom = _a.addressFrom, allocations = _a.allocations, witness = _a.witness;\n            return callThroughToRpc(arguments);\n        },\n        assetInfo: function (_a) {\n            var assetGuid = _a.assetGuid;\n            return callThroughToRpc(arguments);\n        },\n        assetNew: function (_a) {\n            var address = _a.address, publicValue = _a.publicValue, contract = _a.contract, precision = _a.precision, supply = _a.supply, maxSupply = _a.maxSupply, updateFlags = _a.updateFlags, witness = _a.witness;\n            return callThroughToRpc(arguments);\n        },\n        assetSend: function (_a) {\n            var assetGuid = _a.assetGuid, addressTo = _a.addressTo, amount = _a.amount;\n            return callThroughToRpc(arguments);\n        },\n        assetSendMany: function (_a) {\n            var assetGuid = _a.assetGuid, allocations = _a.allocations, witness = _a.witness;\n            return callThroughToRpc(arguments);\n        },\n        assetTransfer: function (_a) {\n            var assetGuid = _a.assetGuid, address = _a.address, witness = _a.witness;\n            return callThroughToRpc(arguments);\n        },\n        assetUpdate: function (_a) {\n            var assetGuid = _a.assetGuid, publicValue = _a.publicValue, contract = _a.contract, supply = _a.supply, updateFlags = _a.updateFlags, witness = _a.witness;\n            return callThroughToRpc(arguments);\n        },\n        convertAddress: function (_a) {\n            var address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        getBlockHashByTxid: function (_a) {\n            var txid = _a.txid;\n            return callThroughToRpc(arguments);\n        },\n        getGovernanceInfo: function () { return callThroughToRpc(arguments); },\n        getSuperblockBudget: function (_a) {\n            var index = _a.index;\n            return callThroughToRpc(arguments);\n        },\n        gObject: function (_a) {\n            var command = _a.command;\n            return callThroughToRpc(arguments);\n        },\n        listAssetAllocationMempoolBalances: function (_a) {\n            var count = _a.count, from = _a.from, query = _a.query;\n            return callThroughToRpc(arguments);\n        },\n        listAssetAllocations: function (_a) {\n            var count = _a.count, from = _a.from, query = _a.query;\n            return callThroughToRpc(arguments);\n        },\n        listAssetIndex: function (_a) {\n            var page = _a.page, options = _a.options;\n            return callThroughToRpc(arguments);\n        },\n        listAssetIndexAllocations: function (_a) {\n            var address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        listAssetIndexAssets: function (_a) {\n            var address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        listAssets: function (_a) {\n            var count = _a.count, from = _a.from, options = _a.options;\n            return callThroughToRpc(arguments);\n        },\n        masternode: function (_a) {\n            var command = _a.command;\n            return callThroughToRpc(arguments);\n        },\n        masternodeBroadcast: function (_a) {\n            var command = _a.command;\n            return callThroughToRpc(arguments);\n        },\n        masternodeList: function (_a) {\n            var mode = _a.mode, filter = _a.filter;\n            return callThroughToRpc(arguments);\n        },\n        mnSync: function (_a) {\n            var command = _a.command;\n            return callThroughToRpc(arguments);\n        },\n        sentinelPing: function (_a) {\n            var version = _a.version;\n            return callThroughToRpc(arguments);\n        },\n        spork: function (_a) {\n            var command = _a.command;\n            return callThroughToRpc(arguments);\n        },\n        syscoinBurn: function (_a) {\n            var fundingAddress = _a.fundingAddress, amount = _a.amount, ethAddress = _a.ethAddress;\n            return callThroughToRpc(arguments);\n        },\n        syscoinDecodeRawTransaction: function (_a) {\n            var hexString = _a.hexString;\n            return callThroughToRpc(arguments);\n        },\n        syscoinGetSpvProof: function (_a) {\n            var txid = _a.txid, blockHash = _a.blockHash;\n            return callThroughToRpc(arguments);\n        },\n        syscoinListReceivedByAddress: function (_a) { return callThroughToRpc(arguments); },\n        syscoinMint: function (_a) {\n            var address = _a.address, amount = _a.amount, blockNum = _a.blockNum, txHex = _a.txHex, txRootHex = _a.txRootHex, txMerkleProofHex = _a.txMerkleProofHex, witness = _a.witness;\n            return callThroughToRpc(arguments);\n        },\n        syscoinSetEthHeaders: function (_a) {\n            var headers = _a.headers;\n            return callThroughToRpc(arguments);\n        },\n        syscoinSetEthStatus: function (_a) {\n            var syncStatus = _a.syncStatus, highestBlock = _a.highestBlock;\n            return callThroughToRpc(arguments);\n        },\n        syscoinStartGeth: function (_a) { return callThroughToRpc(arguments); },\n        syscoinStopGeth: function (_a) { return callThroughToRpc(arguments); },\n        syscoinTxFund: function (_a) {\n            var hexString = _a.hexString, address = _a.address, outputIndex = _a.outputIndex;\n            return callThroughToRpc(arguments);\n        },\n        tpsTestAdd: function (_a) {\n            var startTime = _a.startTime, rawTxs = _a.rawTxs;\n            return callThroughToRpc(arguments);\n        },\n        tpsTestInfo: function (_a) { return callThroughToRpc(arguments); },\n        tpsTestSetEnabled: function (_a) {\n            var enabled = _a.enabled;\n            return callThroughToRpc(arguments);\n        },\n        voteRaw: function (_a) {\n            var mnTxHash = _a.mnTxHash, mnTxIndex = _a.mnTxIndex, govHash = _a.govHash, votSignal = _a.votSignal, vote = _a.vote, time = _a.time, voteSig = _a.voteSig;\n            return callThroughToRpc(arguments);\n        },\n        // == Util ==\n        createMultiSig: function (_a) {\n            var numberOfRequiredSignatures = _a.numberOfRequiredSignatures, keys = _a.keys, addressType = _a.addressType;\n            return callThroughToRpc(arguments);\n        },\n        deriveAddress: function (_a) {\n            var descriptor = _a.descriptor, range = _a.range;\n            return callThroughToRpc(arguments);\n        },\n        estimateSmartFee: function (_a) {\n            var confTarget = _a.confTarget, estimateMode = _a.estimateMode;\n            return callThroughToRpc(arguments);\n        },\n        getDescriptorInfo: function (_a) {\n            var descriptor = _a.descriptor;\n            return callThroughToRpc(arguments);\n        },\n        signMessageWithPrivKey: function (_a) {\n            var privateKey = _a.privateKey, message = _a.message;\n            return callThroughToRpc(arguments);\n        },\n        validateAddress: function (_a) {\n            var address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        verifyMessage: function (_a) {\n            var address = _a.address, signature = _a.signature, message = _a.message;\n            return callThroughToRpc(arguments);\n        },\n        // == Wallet ==\n        abandonTransaction: function (_a) {\n            var txid = _a.txid;\n            return callThroughToRpc(arguments);\n        },\n        abortRescan: function () { return callThroughToRpc(arguments); },\n        addMultiSigAddress: function (_a) {\n            var nRequired = _a.nRequired, keys = _a.keys, label = _a.label, addressType = _a.addressType;\n            return callThroughToRpc(arguments);\n        },\n        backupWallet: function (_a) {\n            var destination = _a.destination;\n            return callThroughToRpc(arguments);\n        },\n        bumpFee: function (_a) {\n            var txid = _a.txid, options = _a.options;\n            return callThroughToRpc(arguments);\n        },\n        createWallet: function (_a) {\n            var walletName = _a.walletName, disablePrivKeys = _a.disablePrivKeys;\n            return callThroughToRpc(arguments);\n        },\n        dumpPrivKey: function (_a) {\n            var address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        dumpWallet: function (_a) {\n            var fileName = _a.fileName;\n            return callThroughToRpc(arguments);\n        },\n        encryptWallet: function (_a) {\n            var passphrase = _a.passphrase;\n            return callThroughToRpc(arguments);\n        },\n        getAddressesByLabel: function (_a) {\n            var label = _a.label;\n            return callThroughToRpc(arguments);\n        },\n        getAddressInfo: function (_a) {\n            var address = _a.address;\n            return callThroughToRpc(arguments);\n        },\n        getBalance: function (_a) {\n            var dummy = _a.dummy, minconf = _a.minconf, includeWatchOnly = _a.includeWatchOnly;\n            return callThroughToRpc(arguments);\n        },\n        getNewAddress: function (_a) {\n            var label = _a.label, addressType = _a.addressType;\n            return callThroughToRpc(arguments);\n        },\n        getRawChangeAddress: function (_a) {\n            var addressType = _a.addressType;\n            return callThroughToRpc(arguments);\n        },\n        getReceivedByAddress: function (_a) {\n            var address = _a.address, minConf = _a.minConf;\n            return callThroughToRpc(arguments);\n        },\n        getReceivedByLabel: function (_a) {\n            var label = _a.label, minConf = _a.minConf;\n            return callThroughToRpc(arguments);\n        },\n        getTransaction: function (_a) {\n            var txid = _a.txid, includeWatchOnly = _a.includeWatchOnly;\n            return callThroughToRpc(arguments);\n        },\n        getUnconfirmedBalance: function (_a) { return callThroughToRpc(arguments); },\n        getWalletInfo: function (_a) { return callThroughToRpc(arguments); },\n        importAddress: function (_a) {\n            var address = _a.address, label = _a.label, rescan = _a.rescan, p2sh = _a.p2sh;\n            return callThroughToRpc(arguments);\n        },\n        importMulti: function (_a) {\n            var requests = _a.requests, options = _a.options;\n            return callThroughToRpc(arguments);\n        },\n        importPrivKey: function (_a) {\n            var key = _a.key, label = _a.label, rescan = _a.rescan;\n            return callThroughToRpc(arguments);\n        },\n        importPrunedFunds: function (_a) {\n            var rawTx = _a.rawTx, txOutProof = _a.txOutProof;\n            return callThroughToRpc(arguments);\n        },\n        importPubKey: function (_a) {\n            var pubKey = _a.pubKey, label = _a.label, rescan = _a.rescan;\n            return callThroughToRpc(arguments);\n        },\n        importWallet: function (_a) {\n            var fileName = _a.fileName;\n            return callThroughToRpc(arguments);\n        },\n        keypoolRefill: function (_a) {\n            var newSize = _a.newSize;\n            return callThroughToRpc(arguments);\n        },\n        listAddressGroupings: function (_a) { return callThroughToRpc(arguments); },\n        listLabels: function (_a) {\n            var purpose = _a.purpose;\n            return callThroughToRpc(arguments);\n        },\n        listLockUnspent: function (_a) { return callThroughToRpc(arguments); },\n        listReceivedByAddress: function (_a) {\n            var minConf = _a.minConf, includeEmpty = _a.includeEmpty, includeWatchOnly = _a.includeWatchOnly, addressFilter = _a.addressFilter;\n            return callThroughToRpc(arguments);\n        },\n        listReceivedByLabel: function (_a) {\n            var minConf = _a.minConf, includeEmpty = _a.includeEmpty, includeWatchOnly = _a.includeWatchOnly;\n            return callThroughToRpc(arguments);\n        },\n        listSinceBlock: function (_a) {\n            var blockHash = _a.blockHash, targetConfs = _a.targetConfs, includeWatchOnly = _a.includeWatchOnly, includeRemoved = _a.includeRemoved;\n            return callThroughToRpc(arguments);\n        },\n        listTransactions: function (_a) {\n            var label = _a.label, count = _a.count, skip = _a.skip, includeWatchOnly = _a.includeWatchOnly;\n            return callThroughToRpc(arguments);\n        },\n        listUnspent: function (_a) {\n            var minConf = _a.minConf, maxConf = _a.maxConf, addresses = _a.addresses, includeUnsafe = _a.includeUnsafe, query = _a.query, options = _a.options;\n            return callThroughToRpc(arguments);\n        },\n        listWalletDir: function (_a) { return callThroughToRpc(arguments); },\n        listWallets: function (_a) { return callThroughToRpc(arguments); },\n        loadWallet: function (_a) {\n            var fileName = _a.fileName;\n            return callThroughToRpc(arguments);\n        },\n        lockUnspent: function (_a) {\n            var unlock = _a.unlock, txs = _a.txs;\n            return callThroughToRpc(arguments);\n        },\n        removePrunedFunds: function (_a) {\n            var txid = _a.txid;\n            return callThroughToRpc(arguments);\n        },\n        rescanBlockchain: function (_a) {\n            var start = _a.start, stop = _a.stop;\n            return callThroughToRpc(arguments);\n        },\n        sendMany: function (_a) {\n            var dummy = _a.dummy, amounts = _a.amounts, minConf = _a.minConf, comment = _a.comment, subtractFeeFrom = _a.subtractFeeFrom, replaceable = _a.replaceable, confTarget = _a.confTarget, estimateMode = _a.estimateMode;\n            return callThroughToRpc(arguments);\n        },\n        sendToAddress: function (_a) {\n            var address = _a.address, amount = _a.amount, minConf = _a.minConf, comment = _a.comment, comment_to = _a.comment_to, subtractFeeFromAmount = _a.subtractFeeFromAmount, replaceable = _a.replaceable, confTarget = _a.confTarget, estimateMode = _a.estimateMode;\n            return callThroughToRpc(arguments);\n        },\n        setHdSeed: function (_a) {\n            var newKeyPool = _a.newKeyPool, seed = _a.seed;\n            return callThroughToRpc(arguments);\n        },\n        setLabel: function (_a) {\n            var address = _a.address, label = _a.label;\n            return callThroughToRpc(arguments);\n        },\n        setTxFee: function (_a) {\n            var amount = _a.amount;\n            return callThroughToRpc(arguments);\n        },\n        signMessage: function (_a) {\n            var address = _a.address, message = _a.message;\n            return callThroughToRpc(arguments);\n        },\n        signRawTransactionWithWallet: function (_a) {\n            var hexString = _a.hexString, rawTxs = _a.rawTxs, sigHashType = _a.sigHashType;\n            return callThroughToRpc(arguments);\n        },\n        unloadWallet: function (_a) {\n            var walletName = _a.walletName;\n            return callThroughToRpc(arguments);\n        },\n        walletCreateFundedPsbt: function (_a) {\n            var txs = _a.txs, amounts = _a.amounts, lockTime = _a.lockTime, options = _a.options, bip32derivs = _a.bip32derivs;\n            return callThroughToRpc(arguments);\n        },\n        walletLock: function (_a) { return callThroughToRpc(arguments); },\n        walletPassphrase: function (_a) {\n            var passphrase = _a.passphrase, timeout = _a.timeout;\n            return callThroughToRpc(arguments);\n        },\n        walletPassphraseChange: function (_a) {\n            var oldPass = _a.oldPass, newPass = _a.newPass;\n            return callThroughToRpc(arguments);\n        },\n        walletProcessPsbt: function (_a) {\n            var pbst = _a.pbst, sign = _a.sign, sigHashType = _a.sigHashType, bip32derivs = _a.bip32derivs;\n            return callThroughToRpc(arguments);\n        },\n        // @formatter:on\n        callThroughToRpc: callThroughToRpc //exposed for unit testing\n    };\n    function callThroughToRpc(args) {\n        var argArr = Array.prototype.slice.call(args);\n        //expect arg array to be a single object\n        if (argArr.length > 1 && typeof argArr[0] !== 'object') {\n            throw new Error(\"callThroughToRpc received unknown params: \" + JSON.stringify(argArr));\n        }\n        var paramArr = [];\n        if (argArr.length > 0) {\n            //get the ordered keys of the object\n            var argObj_1 = argArr[0];\n            var orderedKeys = Reflect.ownKeys(argObj_1);\n            //create an ordered array of just values\n            paramArr = orderedKeys.map(function (value, index, arr) { return argObj_1[value]; });\n        }\n        return callRpc(args.callee.name.toLowerCase(), paramArr);\n    }\n}\nexports.rpcServices = rpcServices;\n//# sourceMappingURL=rpcServices.js.map
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/rpcServices.js	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ dist/rpcServices.js	(date 1558122134000)
@@ -1,648 +1,827 @@
 Object.defineProperty(exports, "__esModule", { value: true });
-function rpcServices(callRpc) {
-    return {
-        // @formatter:off
-        // == Blockchain ==
-        getBestBlockHash: function () { return callThroughToRpc(arguments); },
-        getBlock: function (_a) {
-            var blockHash = _a.blockHash, verbosity = _a.verbosity;
-            return callThroughToRpc(arguments);
-        },
-        getBlockchainInfo: function () { return callThroughToRpc(arguments); },
-        getBlockCount: function () { return callThroughToRpc(arguments); },
-        getBlockFilter: function (_a) {
-            var blockHash = _a.blockHash, filterType = _a.filterType;
-            return callThroughToRpc(arguments);
-        },
-        getBlockHash: function (_a) {
-            var height = _a.height;
-            return callThroughToRpc(arguments);
-        },
-        getBlockHeader: function (_a) {
-            var blockHash = _a.blockHash, verbose = _a.verbose;
-            return callThroughToRpc(arguments);
-        },
-        getBlockStats: function (_a) {
-            var hashOrHeight = _a.hashOrHeight, stats = _a.stats;
-            return callThroughToRpc(arguments);
-        },
-        getChainTips: function (_a) {
-            var count = _a.count, branchLength = _a.branchLength;
-            return callThroughToRpc(arguments);
-        },
-        getChainTxStats: function (_a) {
-            var nBlocks = _a.nBlocks, blockHash = _a.blockHash;
-            return callThroughToRpc(arguments);
-        },
-        getDifficulty: function () { return callThroughToRpc(arguments); },
-        getMemPoolAncestors: function (_a) {
-            var txid = _a.txid, verbose = _a.verbose;
-            return callThroughToRpc(arguments);
-        },
-        getMemPoolDescendants: function (_a) {
-            var txid = _a.txid, verbose = _a.verbose;
-            return callThroughToRpc(arguments);
-        },
-        getMemPoolEntry: function (_a) {
-            var txid = _a.txid;
-            return callThroughToRpc(arguments);
-        },
-        getMemPoolInfo: function () { return callThroughToRpc(arguments); },
-        getRawMemPool: function (_a) {
-            var verbose = _a.verbose;
-            return callThroughToRpc(arguments);
-        },
-        getTxOut: function (_a) {
-            var txid = _a.txid, voutNumber = _a.voutNumber, includeMempool = _a.includeMempool;
-            return callThroughToRpc(arguments);
-        },
-        getTxOutProof: function (_a) {
-            var txids = _a.txids, blockHash = _a.blockHash;
-            return callThroughToRpc(arguments);
-        },
-        getTxOutSetInfo: function () { return callThroughToRpc(arguments); },
-        preciousBlock: function (_a) {
-            var blockHash = _a.blockHash;
-            return callThroughToRpc(arguments);
-        },
-        pruneBlockchain: function (_a) {
-            var blockHeight = _a.blockHeight;
-            return callThroughToRpc(arguments);
-        },
-        saveMemPool: function () { return callThroughToRpc(arguments); },
-        scanTxOutSet: function (_a) {
-            var action = _a.action, scanObjects = _a.scanObjects;
-            return callThroughToRpc(arguments);
-        },
-        verifyChain: function (_a) {
-            var checkLevel = _a.checkLevel, numberOfBlocksToCheck = _a.numberOfBlocksToCheck;
-            return callThroughToRpc(arguments);
-        },
-        verifyTxOutProof: function (_a) {
-            var proof = _a.proof;
-            return callThroughToRpc(arguments);
-        },
-        // == Control ==
-        getMemoryInfo: function (_a) {
-            var mode = _a.mode;
-            return callThroughToRpc(arguments);
-        },
-        getRpcInfo: function () { return callThroughToRpc(arguments); },
-        help: function (_a) {
-            var command = _a.command;
-            return callThroughToRpc(arguments);
-        },
-        logging: function (_a) {
-            var includeCategories = _a.includeCategories, excludeCategories = _a.excludeCategories;
-            return callThroughToRpc(arguments);
-        },
-        stop: function () { return callThroughToRpc(arguments); },
-        uptime: function () { return callThroughToRpc(arguments); },
-        // == Generating ==
-        generate: function (_a) {
-            var numberOfBlocks = _a.numberOfBlocks, maxTries = _a.maxTries;
-            return callThroughToRpc(arguments);
-        },
-        generateToAddress: function (_a) {
-            var numberOfBlocks = _a.numberOfBlocks, address = _a.address, maxTries = _a.maxTries;
-            return callThroughToRpc(arguments);
-        },
-        // == Mining ==
-        createAuxBlock: function (_a) {
-            var address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        getAuxBlock: function (_a) {
-            var blockHash = _a.blockHash, auxPow = _a.auxPow;
-            return callThroughToRpc(arguments);
-        },
-        getBlockTemplate: function (_a) {
-            var blockTemplate = _a.blockTemplate;
-            return callThroughToRpc(arguments);
-        },
-        getMiningInfo: function () { return callThroughToRpc(arguments); },
-        getNetworkHashesPerSecond: function (_a) {
-            var numberOfBlocks = _a.numberOfBlocks, blockHeight = _a.blockHeight;
-            return callThroughToRpc(arguments);
-        },
-        prioritiseTransaction: function (_a) {
-            var txid = _a.txid, dummy = _a.dummy, feeDeltaInSatoshis = _a.feeDeltaInSatoshis;
-            return callThroughToRpc(arguments);
-        },
-        submitAuxBlock: function (_a) {
-            var blockHash = _a.blockHash, auxPow = _a.auxPow;
-            return callThroughToRpc(arguments);
-        },
-        submitBlock: function (_a) {
-            var hexDataToSubmit = _a.hexDataToSubmit;
-            return callThroughToRpc(arguments);
-        },
-        submitHeader: function (_a) {
-            var hexData = _a.hexData;
-            return callThroughToRpc(arguments);
-        },
-        // == Network ==
-        addNode: function (_a) {
-            var nodeAddress = _a.nodeAddress;
-            return callThroughToRpc(arguments);
-        },
-        clearBanned: function () { return callThroughToRpc(arguments); },
-        disconnectNode: function (_a) {
-            var nodeAddress = _a.nodeAddress, nodeId = _a.nodeId;
-            return callThroughToRpc(arguments);
-        },
-        getAddedNodeInfo: function (_a) {
-            var nodeAddress = _a.nodeAddress;
-            return callThroughToRpc(arguments);
-        },
-        getConnectionCount: function () { return callThroughToRpc(arguments); },
-        getNetTotals: function () { return callThroughToRpc(arguments); },
-        getNetworkInfo: function () { return callThroughToRpc(arguments); },
-        getNodeAddresses: function () { return callThroughToRpc(arguments); },
-        getPeerInfo: function () { return callThroughToRpc(arguments); },
-        getInfo: function () { return callThroughToRpc(arguments); },
-        listBanned: function () { return callThroughToRpc(arguments); },
-        ping: function () { return callThroughToRpc(arguments); },
-        setBan: function (_a) {
-            var subnet = _a.subnet, command = _a.command, banTime = _a.banTime;
-            return callThroughToRpc(arguments);
-        },
-        // == Rawtransactions ==
-        analyzePsbt: function (_a) {
-            var pbst = _a.pbst;
-            return callThroughToRpc(arguments);
-        },
-        combinePsbt: function (_a) {
-            var pbsts = _a.pbsts;
-            return callThroughToRpc(arguments);
-        },
-        combineRawTransaction: function (_a) {
-            var hexs = _a.hexs;
-            return callThroughToRpc(arguments);
-        },
-        convertToPsbt: function (_a) {
-            var hex = _a.hex, permitSigData = _a.permitSigData, isWitness = _a.isWitness;
-            return callThroughToRpc(arguments);
-        },
-        createPsbt: function (_a) {
-            var txHeaders = _a.txHeaders, payloadInfo = _a.payloadInfo, locktime = _a.locktime, replaceable = _a.replaceable;
-            return callThroughToRpc(arguments);
-        },
-        createRawTransaction: function (_a) {
-            var txHeaders = _a.txHeaders, payloadInfo = _a.payloadInfo, locktime = _a.locktime, replaceable = _a.replaceable;
-            return callThroughToRpc(arguments);
-        },
-        decodePsbt: function (_a) {
-            var pbst = _a.pbst;
-            return callThroughToRpc(arguments);
-        },
-        decodeRawTransaction: function (_a) {
-            var hexString = _a.hexString, isWitness = _a.isWitness;
-            return callThroughToRpc(arguments);
-        },
-        decodeScript: function (_a) {
-            var hexString = _a.hexString;
-            return callThroughToRpc(arguments);
-        },
-        finalizePsbt: function (_a) {
-            var pbst = _a.pbst, extract = _a.extract;
-            return callThroughToRpc(arguments);
-        },
-        fundRawTransaction: function (_a) {
-            var hexString = _a.hexString, options = _a.options, isWitness = _a.isWitness;
-            return callThroughToRpc(arguments);
-        },
-        getRawTransaction: function (_a) {
-            var txid = _a.txid, verbose = _a.verbose, blockHash = _a.blockHash;
-            return callThroughToRpc(arguments);
-        },
-        joinPsbts: function (_a) {
-            var pbsts = _a.pbsts;
-            return callThroughToRpc(arguments);
-        },
-        sendRawTransaction: function (_a) {
-            var hexString = _a.hexString, maxFeeRate = _a.maxFeeRate;
-            return callThroughToRpc(arguments);
-        },
-        signRawTransactionWithKey: function (_a) {
-            var hexString = _a.hexString, privateKeys = _a.privateKeys, txs = _a.txs, sigHashType = _a.sigHashType;
-            return callThroughToRpc(arguments);
-        },
-        testMempoolAccept: function (_a) {
-            var rawTxs = _a.rawTxs, maxFeeRate = _a.maxFeeRate;
-            return callThroughToRpc(arguments);
-        },
-        utxoUpdatePsbt: function (_a) {
-            var pbst = _a.pbst;
-            return callThroughToRpc(arguments);
-        },
-        // == Syscoin ==
-        addressBalance: function (_a) {
-            var address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        assetAllocationBalance: function (_a) {
-            var assetGuid = _a.assetGuid, address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        assetAllocationBurn: function (_a) {
-            var assetGuid = _a.assetGuid, address = _a.address, amount = _a.amount, ethAddress = _a.ethAddress;
-            return callThroughToRpc(arguments);
-        },
-        assetAllocationInfo: function (_a) {
-            var assetGuid = _a.assetGuid, address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        assetAllocationLock: function (_a) {
-            var assetGuid = _a.assetGuid, addressFrom = _a.addressFrom, txid = _a.txid, outputIndex = _a.outputIndex, witness = _a.witness;
-            return callThroughToRpc(arguments);
-        },
-        assetAllocationMint: function (_a) {
-            var assetGuid = _a.assetGuid, address = _a.address, amount = _a.amount, blockNum = _a.blockNum, txHex = _a.txHex, txRootHex = _a.txRootHex, merkleProofHex = _a.merkleProofHex, merkleProofPathHex = _a.merkleProofPathHex, witness = _a.witness;
-            return callThroughToRpc(arguments);
-        },
-        assetAllocationSend: function (_a) {
-            var assetGuid = _a.assetGuid, addressFrom = _a.addressFrom, addressTo = _a.addressTo, amount = _a.amount;
-            return callThroughToRpc(arguments);
-        },
-        assetAllocationSenderStatus: function (_a) {
-            var assetGuid = _a.assetGuid, address = _a.address, txid = _a.txid;
-            return callThroughToRpc(arguments);
-        },
-        assetAllocationSendMany: function (_a) {
-            var assetGuid = _a.assetGuid, addressFrom = _a.addressFrom, allocations = _a.allocations, witness = _a.witness;
-            return callThroughToRpc(arguments);
-        },
-        assetInfo: function (_a) {
-            var assetGuid = _a.assetGuid;
-            return callThroughToRpc(arguments);
-        },
-        assetNew: function (_a) {
-            var address = _a.address, publicValue = _a.publicValue, contract = _a.contract, precision = _a.precision, supply = _a.supply, maxSupply = _a.maxSupply, updateFlags = _a.updateFlags, witness = _a.witness;
-            return callThroughToRpc(arguments);
-        },
-        assetSend: function (_a) {
-            var assetGuid = _a.assetGuid, addressTo = _a.addressTo, amount = _a.amount;
-            return callThroughToRpc(arguments);
-        },
-        assetSendMany: function (_a) {
-            var assetGuid = _a.assetGuid, allocations = _a.allocations, witness = _a.witness;
-            return callThroughToRpc(arguments);
-        },
-        assetTransfer: function (_a) {
-            var assetGuid = _a.assetGuid, address = _a.address, witness = _a.witness;
-            return callThroughToRpc(arguments);
-        },
-        assetUpdate: function (_a) {
-            var assetGuid = _a.assetGuid, publicValue = _a.publicValue, contract = _a.contract, supply = _a.supply, updateFlags = _a.updateFlags, witness = _a.witness;
-            return callThroughToRpc(arguments);
-        },
-        convertAddress: function (_a) {
-            var address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        getBlockHashByTxid: function (_a) {
-            var txid = _a.txid;
-            return callThroughToRpc(arguments);
-        },
-        getGovernanceInfo: function () { return callThroughToRpc(arguments); },
-        getSuperblockBudget: function (_a) {
-            var index = _a.index;
-            return callThroughToRpc(arguments);
-        },
-        gObject: function (_a) {
-            var command = _a.command;
-            return callThroughToRpc(arguments);
-        },
-        listAssetAllocationMempoolBalances: function (_a) {
-            var count = _a.count, from = _a.from, query = _a.query;
-            return callThroughToRpc(arguments);
-        },
-        listAssetAllocations: function (_a) {
-            var count = _a.count, from = _a.from, query = _a.query;
-            return callThroughToRpc(arguments);
-        },
-        listAssetIndex: function (_a) {
-            var page = _a.page, options = _a.options;
-            return callThroughToRpc(arguments);
-        },
-        listAssetIndexAllocations: function (_a) {
-            var address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        listAssetIndexAssets: function (_a) {
-            var address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        listAssets: function (_a) {
-            var count = _a.count, from = _a.from, options = _a.options;
-            return callThroughToRpc(arguments);
-        },
-        masternode: function (_a) {
-            var command = _a.command;
-            return callThroughToRpc(arguments);
-        },
-        masternodeBroadcast: function (_a) {
-            var command = _a.command;
-            return callThroughToRpc(arguments);
-        },
-        masternodeList: function (_a) {
-            var mode = _a.mode, filter = _a.filter;
-            return callThroughToRpc(arguments);
-        },
-        mnSync: function (_a) {
-            var command = _a.command;
-            return callThroughToRpc(arguments);
-        },
-        sentinelPing: function (_a) {
-            var version = _a.version;
-            return callThroughToRpc(arguments);
-        },
-        spork: function (_a) {
-            var command = _a.command;
-            return callThroughToRpc(arguments);
-        },
-        syscoinBurn: function (_a) {
-            var fundingAddress = _a.fundingAddress, amount = _a.amount, ethAddress = _a.ethAddress;
-            return callThroughToRpc(arguments);
-        },
-        syscoinDecodeRawTransaction: function (_a) {
-            var hexString = _a.hexString;
-            return callThroughToRpc(arguments);
-        },
-        syscoinGetSpvProof: function (_a) {
-            var txid = _a.txid, blockHash = _a.blockHash;
-            return callThroughToRpc(arguments);
-        },
-        syscoinListReceivedByAddress: function (_a) { return callThroughToRpc(arguments); },
-        syscoinMint: function (_a) {
-            var address = _a.address, amount = _a.amount, blockNum = _a.blockNum, txHex = _a.txHex, txRootHex = _a.txRootHex, txMerkleProofHex = _a.txMerkleProofHex, witness = _a.witness;
-            return callThroughToRpc(arguments);
-        },
-        syscoinSetEthHeaders: function (_a) {
-            var headers = _a.headers;
-            return callThroughToRpc(arguments);
-        },
-        syscoinSetEthStatus: function (_a) {
-            var syncStatus = _a.syncStatus, highestBlock = _a.highestBlock;
-            return callThroughToRpc(arguments);
-        },
-        syscoinStartGeth: function (_a) { return callThroughToRpc(arguments); },
-        syscoinStopGeth: function (_a) { return callThroughToRpc(arguments); },
-        syscoinTxFund: function (_a) {
-            var hexString = _a.hexString, address = _a.address, outputIndex = _a.outputIndex;
-            return callThroughToRpc(arguments);
-        },
-        tpsTestAdd: function (_a) {
-            var startTime = _a.startTime, rawTxs = _a.rawTxs;
-            return callThroughToRpc(arguments);
-        },
-        tpsTestInfo: function (_a) { return callThroughToRpc(arguments); },
-        tpsTestSetEnabled: function (_a) {
-            var enabled = _a.enabled;
-            return callThroughToRpc(arguments);
-        },
-        voteRaw: function (_a) {
-            var mnTxHash = _a.mnTxHash, mnTxIndex = _a.mnTxIndex, govHash = _a.govHash, votSignal = _a.votSignal, vote = _a.vote, time = _a.time, voteSig = _a.voteSig;
-            return callThroughToRpc(arguments);
-        },
-        // == Util ==
-        createMultiSig: function (_a) {
-            var numberOfRequiredSignatures = _a.numberOfRequiredSignatures, keys = _a.keys, addressType = _a.addressType;
-            return callThroughToRpc(arguments);
-        },
-        deriveAddress: function (_a) {
-            var descriptor = _a.descriptor, range = _a.range;
-            return callThroughToRpc(arguments);
-        },
-        estimateSmartFee: function (_a) {
-            var confTarget = _a.confTarget, estimateMode = _a.estimateMode;
-            return callThroughToRpc(arguments);
-        },
-        getDescriptorInfo: function (_a) {
-            var descriptor = _a.descriptor;
-            return callThroughToRpc(arguments);
-        },
-        signMessageWithPrivKey: function (_a) {
-            var privateKey = _a.privateKey, message = _a.message;
-            return callThroughToRpc(arguments);
-        },
-        validateAddress: function (_a) {
-            var address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        verifyMessage: function (_a) {
-            var address = _a.address, signature = _a.signature, message = _a.message;
-            return callThroughToRpc(arguments);
-        },
-        // == Wallet ==
-        abandonTransaction: function (_a) {
-            var txid = _a.txid;
-            return callThroughToRpc(arguments);
-        },
-        abortRescan: function () { return callThroughToRpc(arguments); },
-        addMultiSigAddress: function (_a) {
-            var nRequired = _a.nRequired, keys = _a.keys, label = _a.label, addressType = _a.addressType;
-            return callThroughToRpc(arguments);
-        },
-        backupWallet: function (_a) {
-            var destination = _a.destination;
-            return callThroughToRpc(arguments);
-        },
-        bumpFee: function (_a) {
-            var txid = _a.txid, options = _a.options;
-            return callThroughToRpc(arguments);
-        },
-        createWallet: function (_a) {
-            var walletName = _a.walletName, disablePrivKeys = _a.disablePrivKeys;
-            return callThroughToRpc(arguments);
-        },
-        dumpPrivKey: function (_a) {
-            var address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        dumpWallet: function (_a) {
-            var fileName = _a.fileName;
-            return callThroughToRpc(arguments);
-        },
-        encryptWallet: function (_a) {
-            var passphrase = _a.passphrase;
-            return callThroughToRpc(arguments);
-        },
-        getAddressesByLabel: function (_a) {
-            var label = _a.label;
-            return callThroughToRpc(arguments);
-        },
-        getAddressInfo: function (_a) {
-            var address = _a.address;
-            return callThroughToRpc(arguments);
-        },
-        getBalance: function (_a) {
-            var dummy = _a.dummy, minconf = _a.minconf, includeWatchOnly = _a.includeWatchOnly;
-            return callThroughToRpc(arguments);
-        },
-        getNewAddress: function (_a) {
-            var label = _a.label, addressType = _a.addressType;
-            return callThroughToRpc(arguments);
-        },
-        getRawChangeAddress: function (_a) {
-            var addressType = _a.addressType;
-            return callThroughToRpc(arguments);
-        },
-        getReceivedByAddress: function (_a) {
-            var address = _a.address, minConf = _a.minConf;
-            return callThroughToRpc(arguments);
-        },
-        getReceivedByLabel: function (_a) {
-            var label = _a.label, minConf = _a.minConf;
-            return callThroughToRpc(arguments);
-        },
-        getTransaction: function (_a) {
-            var txid = _a.txid, includeWatchOnly = _a.includeWatchOnly;
-            return callThroughToRpc(arguments);
-        },
-        getUnconfirmedBalance: function (_a) { return callThroughToRpc(arguments); },
-        getWalletInfo: function (_a) { return callThroughToRpc(arguments); },
-        importAddress: function (_a) {
-            var address = _a.address, label = _a.label, rescan = _a.rescan, p2sh = _a.p2sh;
-            return callThroughToRpc(arguments);
-        },
-        importMulti: function (_a) {
-            var requests = _a.requests, options = _a.options;
-            return callThroughToRpc(arguments);
-        },
-        importPrivKey: function (_a) {
-            var key = _a.key, label = _a.label, rescan = _a.rescan;
-            return callThroughToRpc(arguments);
-        },
-        importPrunedFunds: function (_a) {
-            var rawTx = _a.rawTx, txOutProof = _a.txOutProof;
-            return callThroughToRpc(arguments);
-        },
-        importPubKey: function (_a) {
-            var pubKey = _a.pubKey, label = _a.label, rescan = _a.rescan;
-            return callThroughToRpc(arguments);
-        },
-        importWallet: function (_a) {
-            var fileName = _a.fileName;
-            return callThroughToRpc(arguments);
-        },
-        keypoolRefill: function (_a) {
-            var newSize = _a.newSize;
-            return callThroughToRpc(arguments);
-        },
-        listAddressGroupings: function (_a) { return callThroughToRpc(arguments); },
-        listLabels: function (_a) {
-            var purpose = _a.purpose;
-            return callThroughToRpc(arguments);
-        },
-        listLockUnspent: function (_a) { return callThroughToRpc(arguments); },
-        listReceivedByAddress: function (_a) {
-            var minConf = _a.minConf, includeEmpty = _a.includeEmpty, includeWatchOnly = _a.includeWatchOnly, addressFilter = _a.addressFilter;
-            return callThroughToRpc(arguments);
-        },
-        listReceivedByLabel: function (_a) {
-            var minConf = _a.minConf, includeEmpty = _a.includeEmpty, includeWatchOnly = _a.includeWatchOnly;
-            return callThroughToRpc(arguments);
-        },
-        listSinceBlock: function (_a) {
-            var blockHash = _a.blockHash, targetConfs = _a.targetConfs, includeWatchOnly = _a.includeWatchOnly, includeRemoved = _a.includeRemoved;
-            return callThroughToRpc(arguments);
-        },
-        listTransactions: function (_a) {
-            var label = _a.label, count = _a.count, skip = _a.skip, includeWatchOnly = _a.includeWatchOnly;
-            return callThroughToRpc(arguments);
-        },
-        listUnspent: function (_a) {
-            var minConf = _a.minConf, maxConf = _a.maxConf, addresses = _a.addresses, includeUnsafe = _a.includeUnsafe, query = _a.query, options = _a.options;
-            return callThroughToRpc(arguments);
-        },
-        listWalletDir: function (_a) { return callThroughToRpc(arguments); },
-        listWallets: function (_a) { return callThroughToRpc(arguments); },
-        loadWallet: function (_a) {
-            var fileName = _a.fileName;
-            return callThroughToRpc(arguments);
-        },
-        lockUnspent: function (_a) {
-            var unlock = _a.unlock, txs = _a.txs;
-            return callThroughToRpc(arguments);
-        },
-        removePrunedFunds: function (_a) {
-            var txid = _a.txid;
-            return callThroughToRpc(arguments);
-        },
-        rescanBlockchain: function (_a) {
-            var start = _a.start, stop = _a.stop;
-            return callThroughToRpc(arguments);
-        },
-        sendMany: function (_a) {
-            var dummy = _a.dummy, amounts = _a.amounts, minConf = _a.minConf, comment = _a.comment, subtractFeeFrom = _a.subtractFeeFrom, replaceable = _a.replaceable, confTarget = _a.confTarget, estimateMode = _a.estimateMode;
-            return callThroughToRpc(arguments);
-        },
-        sendToAddress: function (_a) {
-            var address = _a.address, amount = _a.amount, minConf = _a.minConf, comment = _a.comment, comment_to = _a.comment_to, subtractFeeFromAmount = _a.subtractFeeFromAmount, replaceable = _a.replaceable, confTarget = _a.confTarget, estimateMode = _a.estimateMode;
-            return callThroughToRpc(arguments);
-        },
-        setHdSeed: function (_a) {
-            var newKeyPool = _a.newKeyPool, seed = _a.seed;
-            return callThroughToRpc(arguments);
-        },
-        setLabel: function (_a) {
-            var address = _a.address, label = _a.label;
-            return callThroughToRpc(arguments);
-        },
-        setTxFee: function (_a) {
-            var amount = _a.amount;
-            return callThroughToRpc(arguments);
-        },
-        signMessage: function (_a) {
-            var address = _a.address, message = _a.message;
-            return callThroughToRpc(arguments);
-        },
-        signRawTransactionWithWallet: function (_a) {
-            var hexString = _a.hexString, rawTxs = _a.rawTxs, sigHashType = _a.sigHashType;
-            return callThroughToRpc(arguments);
-        },
-        unloadWallet: function (_a) {
-            var walletName = _a.walletName;
-            return callThroughToRpc(arguments);
-        },
-        walletCreateFundedPsbt: function (_a) {
-            var txs = _a.txs, amounts = _a.amounts, lockTime = _a.lockTime, options = _a.options, bip32derivs = _a.bip32derivs;
-            return callThroughToRpc(arguments);
-        },
-        walletLock: function (_a) { return callThroughToRpc(arguments); },
-        walletPassphrase: function (_a) {
-            var passphrase = _a.passphrase, timeout = _a.timeout;
-            return callThroughToRpc(arguments);
-        },
-        walletPassphraseChange: function (_a) {
-            var oldPass = _a.oldPass, newPass = _a.newPass;
-            return callThroughToRpc(arguments);
-        },
-        walletProcessPsbt: function (_a) {
-            var pbst = _a.pbst, sign = _a.sign, sigHashType = _a.sigHashType, bip32derivs = _a.bip32derivs;
-            return callThroughToRpc(arguments);
-        },
-        // @formatter:on
-        callThroughToRpc: callThroughToRpc //exposed for unit testing
+var RPCServices = /** @class */ (function () {
+    function RPCServices(callRpc) {
+        this.callRpc = callRpc;
+        console.log("callRPC", this.callRpc);
+    }
+    RPCServices.prototype.callThroughToRpc = function (args) {
+        var argArr = Array.prototype.slice.call(args);
+        //expect arg array to be a single object
+        if (argArr.length > 1 && typeof argArr[0] !== 'object') {
+            throw new Error("this.callThroughToRpc received unknown params: " + JSON.stringify(argArr));
+        }
+        var paramArr = [];
+        if (argArr.length > 0) {
+            //get the ordered keys of the object
+            var argObj_1 = argArr[0];
+            var orderedKeys = Reflect.ownKeys(argObj_1);
+            //create an ordered array of just values
+            paramArr = orderedKeys.map(function (value, index, arr) { return argObj_1[value]; });
+        }
+        return this.callRpc(args.callee.name.toLowerCase(), paramArr);
+    };
+    // @formatter:off
+    // == Blockchain ==
+    RPCServices.prototype.getBestBlockHash = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getBlock = function (_a) {
+        var blockHash = _a.blockHash, verbosity = _a.verbosity;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getBlockchainInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getBlockCount = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getBlockFilter = function (_a) {
+        var blockHash = _a.blockHash, filterType = _a.filterType;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getBlockHash = function (_a) {
+        var height = _a.height;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getBlockHeader = function (_a) {
+        var blockHash = _a.blockHash, verbose = _a.verbose;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getBlockStats = function (_a) {
+        var hashOrHeight = _a.hashOrHeight, stats = _a.stats;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getChainTips = function (_a) {
+        var count = _a.count, branchLength = _a.branchLength;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getChainTxStats = function (_a) {
+        var nBlocks = _a.nBlocks, blockHash = _a.blockHash;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getDifficulty = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getMemPoolAncestors = function (_a) {
+        var txid = _a.txid, verbose = _a.verbose;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getMemPoolDescendants = function (_a) {
+        var txid = _a.txid, verbose = _a.verbose;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getMemPoolEntry = function (_a) {
+        var txid = _a.txid;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getMemPoolInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getRawMemPool = function (_a) {
+        var verbose = _a.verbose;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getTxOut = function (_a) {
+        var txid = _a.txid, voutNumber = _a.voutNumber, includeMempool = _a.includeMempool;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getTxOutProof = function (_a) {
+        var txids = _a.txids, blockHash = _a.blockHash;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getTxOutSetInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.preciousBlock = function (_a) {
+        var blockHash = _a.blockHash;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.pruneBlockchain = function (_a) {
+        var blockHeight = _a.blockHeight;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.saveMemPool = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.scanTxOutSet = function (_a) {
+        var action = _a.action, scanObjects = _a.scanObjects;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.verifyChain = function (_a) {
+        var checkLevel = _a.checkLevel, numberOfBlocksToCheck = _a.numberOfBlocksToCheck;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.verifyTxOutProof = function (_a) {
+        var proof = _a.proof;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    // == Control ==
+    RPCServices.prototype.getMemoryInfo = function (_a) {
+        var mode = _a.mode;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getRpcInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.help = function (_a) {
+        var command = _a.command;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.logging = function (_a) {
+        var includeCategories = _a.includeCategories, excludeCategories = _a.excludeCategories;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.stop = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.uptime = function () { return this.callThroughToRpc(arguments); };
+    ;
+    // == Generating ==
+    RPCServices.prototype.generate = function (_a) {
+        var numberOfBlocks = _a.numberOfBlocks, maxTries = _a.maxTries;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.generateToAddress = function (_a) {
+        var numberOfBlocks = _a.numberOfBlocks, address = _a.address, maxTries = _a.maxTries;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    // == Mining ==
+    RPCServices.prototype.createAuxBlock = function (_a) {
+        var address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getAuxBlock = function (_a) {
+        var blockHash = _a.blockHash, auxPow = _a.auxPow;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getBlockTemplate = function (_a) {
+        var blockTemplate = _a.blockTemplate;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getMiningInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getNetworkHashesPerSecond = function (_a) {
+        var numberOfBlocks = _a.numberOfBlocks, blockHeight = _a.blockHeight;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.prioritiseTransaction = function (_a) {
+        var txid = _a.txid, dummy = _a.dummy, feeDeltaInSatoshis = _a.feeDeltaInSatoshis;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.submitAuxBlock = function (_a) {
+        var blockHash = _a.blockHash, auxPow = _a.auxPow;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.submitBlock = function (_a) {
+        var hexDataToSubmit = _a.hexDataToSubmit;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.submitHeader = function (_a) {
+        var hexData = _a.hexData;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    // == Network ==
+    RPCServices.prototype.addNode = function (_a) {
+        var nodeAddress = _a.nodeAddress;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.clearBanned = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.disconnectNode = function (_a) {
+        var nodeAddress = _a.nodeAddress, nodeId = _a.nodeId;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getAddedNodeInfo = function (_a) {
+        var nodeAddress = _a.nodeAddress;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getConnectionCount = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getNetTotals = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getNetworkInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getNodeAddresses = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getPeerInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.listBanned = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.ping = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.setBan = function (_a) {
+        var subnet = _a.subnet, command = _a.command, banTime = _a.banTime;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    // == Rawtransactions ==
+    RPCServices.prototype.analyzePsbt = function (_a) {
+        var pbst = _a.pbst;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.combinePsbt = function (_a) {
+        var pbsts = _a.pbsts;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.combineRawTransaction = function (_a) {
+        var hexs = _a.hexs;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.convertToPsbt = function (_a) {
+        var hex = _a.hex, permitSigData = _a.permitSigData, isWitness = _a.isWitness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.createPsbt = function (_a) {
+        var txHeaders = _a.txHeaders, payloadInfo = _a.payloadInfo, locktime = _a.locktime, replaceable = _a.replaceable;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.createRawTransaction = function (_a) {
+        var txHeaders = _a.txHeaders, payloadInfo = _a.payloadInfo, locktime = _a.locktime, replaceable = _a.replaceable;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.decodePsbt = function (_a) {
+        var pbst = _a.pbst;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.decodeRawTransaction = function (_a) {
+        var hexString = _a.hexString, isWitness = _a.isWitness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.decodeScript = function (_a) {
+        var hexString = _a.hexString;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.finalizePsbt = function (_a) {
+        var pbst = _a.pbst, extract = _a.extract;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.fundRawTransaction = function (_a) {
+        var hexString = _a.hexString, options = _a.options, isWitness = _a.isWitness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getRawTransaction = function (_a) {
+        var txid = _a.txid, verbose = _a.verbose, blockHash = _a.blockHash;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.joinPsbts = function (_a) {
+        var pbsts = _a.pbsts;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.sendRawTransaction = function (_a) {
+        var hexString = _a.hexString, maxFeeRate = _a.maxFeeRate;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.signRawTransactionWithKey = function (_a) {
+        var hexString = _a.hexString, privateKeys = _a.privateKeys, txs = _a.txs, sigHashType = _a.sigHashType;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.testMempoolAccept = function (_a) {
+        var rawTxs = _a.rawTxs, maxFeeRate = _a.maxFeeRate;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.utxoUpdatePsbt = function (_a) {
+        var pbst = _a.pbst;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    // == Syscoin ==
+    RPCServices.prototype.addressBalance = function (_a) {
+        var address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetAllocationBalance = function (_a) {
+        var assetGuid = _a.assetGuid, address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetAllocationBurn = function (_a) {
+        var assetGuid = _a.assetGuid, address = _a.address, amount = _a.amount, ethAddress = _a.ethAddress;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetAllocationInfo = function (_a) {
+        var assetGuid = _a.assetGuid, address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetAllocationLock = function (_a) {
+        var assetGuid = _a.assetGuid, addressFrom = _a.addressFrom, txid = _a.txid, outputIndex = _a.outputIndex, witness = _a.witness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetAllocationMint = function (_a) {
+        var assetGuid = _a.assetGuid, address = _a.address, amount = _a.amount, blockNum = _a.blockNum, txHex = _a.txHex, txRootHex = _a.txRootHex, merkleProofHex = _a.merkleProofHex, merkleProofPathHex = _a.merkleProofPathHex, witness = _a.witness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetAllocationSend = function (_a) {
+        var assetGuid = _a.assetGuid, addressFrom = _a.addressFrom, addressTo = _a.addressTo, amount = _a.amount;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetAllocationSenderStatus = function (_a) {
+        var assetGuid = _a.assetGuid, address = _a.address, txid = _a.txid;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetAllocationSendMany = function (_a) {
+        var assetGuid = _a.assetGuid, addressFrom = _a.addressFrom, allocations = _a.allocations, witness = _a.witness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetInfo = function (_a) {
+        var assetGuid = _a.assetGuid;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetNew = function (_a) {
+        var address = _a.address, publicValue = _a.publicValue, contract = _a.contract, precision = _a.precision, supply = _a.supply, maxSupply = _a.maxSupply, updateFlags = _a.updateFlags, witness = _a.witness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetSend = function (_a) {
+        var assetGuid = _a.assetGuid, addressTo = _a.addressTo, amount = _a.amount;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetSendMany = function (_a) {
+        var assetGuid = _a.assetGuid, allocations = _a.allocations, witness = _a.witness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetTransfer = function (_a) {
+        var assetGuid = _a.assetGuid, address = _a.address, witness = _a.witness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.assetUpdate = function (_a) {
+        var assetGuid = _a.assetGuid, publicValue = _a.publicValue, contract = _a.contract, supply = _a.supply, updateFlags = _a.updateFlags, witness = _a.witness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.convertAddress = function (_a) {
+        var address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getBlockHashByTxid = function (_a) {
+        var txid = _a.txid;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getGovernanceInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getSuperblockBudget = function (_a) {
+        var index = _a.index;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.gObject = function (_a) {
+        var command = _a.command;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listAssetAllocationMempoolBalances = function (_a) {
+        var count = _a.count, from = _a.from, query = _a.query;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listAssetAllocations = function (_a) {
+        var count = _a.count, from = _a.from, query = _a.query;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listAssetIndex = function (_a) {
+        var page = _a.page, options = _a.options;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listAssetIndexAllocations = function (_a) {
+        var address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listAssetIndexAssets = function (_a) {
+        var address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listAssets = function (_a) {
+        var count = _a.count, from = _a.from, options = _a.options;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.masternode = function (_a) {
+        var command = _a.command;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.masternodeBroadcast = function (_a) {
+        var command = _a.command;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.masternodeList = function (_a) {
+        var mode = _a.mode, filter = _a.filter;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.mnSync = function (_a) {
+        var command = _a.command;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.sentinelPing = function (_a) {
+        var version = _a.version;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.spork = function (_a) {
+        var command = _a.command;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.syscoinBurn = function (_a) {
+        var fundingAddress = _a.fundingAddress, amount = _a.amount, ethAddress = _a.ethAddress;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.syscoinDecodeRawTransaction = function (_a) {
+        var hexString = _a.hexString;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.syscoinGetSpvProof = function (_a) {
+        var txid = _a.txid, blockHash = _a.blockHash;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.syscoinListReceivedByAddress = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.syscoinMint = function (_a) {
+        var address = _a.address, amount = _a.amount, blockNum = _a.blockNum, txHex = _a.txHex, txRootHex = _a.txRootHex, txMerkleProofHex = _a.txMerkleProofHex, witness = _a.witness;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.syscoinSetEthHeaders = function (_a) {
+        var headers = _a.headers;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.syscoinSetEthStatus = function (_a) {
+        var syncStatus = _a.syncStatus, highestBlock = _a.highestBlock;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.syscoinStartGeth = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.syscoinStopGeth = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.syscoinTxFund = function (_a) {
+        var hexString = _a.hexString, address = _a.address, outputIndex = _a.outputIndex;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.tpsTestAdd = function (_a) {
+        var startTime = _a.startTime, rawTxs = _a.rawTxs;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.tpsTestInfo = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.tpsTestSetEnabled = function (_a) {
+        var enabled = _a.enabled;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.voteRaw = function (_a) {
+        var mnTxHash = _a.mnTxHash, mnTxIndex = _a.mnTxIndex, govHash = _a.govHash, votSignal = _a.votSignal, vote = _a.vote, time = _a.time, voteSig = _a.voteSig;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    // == Util ==
+    RPCServices.prototype.createMultiSig = function (_a) {
+        var numberOfRequiredSignatures = _a.numberOfRequiredSignatures, keys = _a.keys, addressType = _a.addressType;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.deriveAddress = function (_a) {
+        var descriptor = _a.descriptor, range = _a.range;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.estimateSmartFee = function (_a) {
+        var confTarget = _a.confTarget, estimateMode = _a.estimateMode;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getDescriptorInfo = function (_a) {
+        var descriptor = _a.descriptor;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.signMessageWithPrivKey = function (_a) {
+        var privateKey = _a.privateKey, message = _a.message;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.validateAddress = function (_a) {
+        var address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.verifyMessage = function (_a) {
+        var address = _a.address, signature = _a.signature, message = _a.message;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    // == Wallet ==
+    RPCServices.prototype.abandonTransaction = function (_a) {
+        var txid = _a.txid;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.abortRescan = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.addMultiSigAddress = function (_a) {
+        var nRequired = _a.nRequired, keys = _a.keys, label = _a.label, addressType = _a.addressType;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.backupWallet = function (_a) {
+        var destination = _a.destination;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.bumpFee = function (_a) {
+        var txid = _a.txid, options = _a.options;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.createWallet = function (_a) {
+        var walletName = _a.walletName, disablePrivKeys = _a.disablePrivKeys;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.dumpPrivKey = function (_a) {
+        var address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.dumpWallet = function (_a) {
+        var fileName = _a.fileName;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.encryptWallet = function (_a) {
+        var passphrase = _a.passphrase;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getAddressesByLabel = function (_a) {
+        var label = _a.label;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getAddressInfo = function (_a) {
+        var address = _a.address;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getBalance = function (_a) {
+        var dummy = _a.dummy, minconf = _a.minconf, includeWatchOnly = _a.includeWatchOnly;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getNewAddress = function (_a) {
+        var label = _a.label, addressType = _a.addressType;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getRawChangeAddress = function (_a) {
+        var addressType = _a.addressType;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getReceivedByAddress = function (_a) {
+        var address = _a.address, minConf = _a.minConf;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getReceivedByLabel = function (_a) {
+        var label = _a.label, minConf = _a.minConf;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getTransaction = function (_a) {
+        var txid = _a.txid, includeWatchOnly = _a.includeWatchOnly;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.getUnconfirmedBalance = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.getWalletInfo = function () { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.importAddress = function (_a) {
+        var address = _a.address, label = _a.label, rescan = _a.rescan, p2sh = _a.p2sh;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.importMulti = function (_a) {
+        var requests = _a.requests, options = _a.options;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.importPrivKey = function (_a) {
+        var key = _a.key, label = _a.label, rescan = _a.rescan;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.importPrunedFunds = function (_a) {
+        var rawTx = _a.rawTx, txOutProof = _a.txOutProof;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.importPubKey = function (_a) {
+        var pubKey = _a.pubKey, label = _a.label, rescan = _a.rescan;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.importWallet = function (_a) {
+        var fileName = _a.fileName;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.keypoolRefill = function (_a) {
+        var newSize = _a.newSize;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listAddressGroupings = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.listLabels = function (_a) {
+        var purpose = _a.purpose;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listLockUnspent = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.listReceivedByAddress = function (_a) {
+        var minConf = _a.minConf, includeEmpty = _a.includeEmpty, includeWatchOnly = _a.includeWatchOnly, addressFilter = _a.addressFilter;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listReceivedByLabel = function (_a) {
+        var minConf = _a.minConf, includeEmpty = _a.includeEmpty, includeWatchOnly = _a.includeWatchOnly;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listSinceBlock = function (_a) {
+        var blockHash = _a.blockHash, targetConfs = _a.targetConfs, includeWatchOnly = _a.includeWatchOnly, includeRemoved = _a.includeRemoved;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listTransactions = function (_a) {
+        var label = _a.label, count = _a.count, skip = _a.skip, includeWatchOnly = _a.includeWatchOnly;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listUnspent = function (_a) {
+        var minConf = _a.minConf, maxConf = _a.maxConf, addresses = _a.addresses, includeUnsafe = _a.includeUnsafe, query = _a.query, options = _a.options;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.listWalletDir = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.listWallets = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.loadWallet = function (_a) {
+        var fileName = _a.fileName;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.lockUnspent = function (_a) {
+        var unlock = _a.unlock, txs = _a.txs;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.removePrunedFunds = function (_a) {
+        var txid = _a.txid;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.rescanBlockchain = function (_a) {
+        var start = _a.start, stop = _a.stop;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.sendMany = function (_a) {
+        var dummy = _a.dummy, amounts = _a.amounts, minConf = _a.minConf, comment = _a.comment, subtractFeeFrom = _a.subtractFeeFrom, replaceable = _a.replaceable, confTarget = _a.confTarget, estimateMode = _a.estimateMode;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.sendToAddress = function (_a) {
+        var address = _a.address, amount = _a.amount, minConf = _a.minConf, comment = _a.comment, comment_to = _a.comment_to, subtractFeeFromAmount = _a.subtractFeeFromAmount, replaceable = _a.replaceable, confTarget = _a.confTarget, estimateMode = _a.estimateMode;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.setHdSeed = function (_a) {
+        var newKeyPool = _a.newKeyPool, seed = _a.seed;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.setLabel = function (_a) {
+        var address = _a.address, label = _a.label;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.setTxFee = function (_a) {
+        var amount = _a.amount;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.signMessage = function (_a) {
+        var address = _a.address, message = _a.message;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.signRawTransactionWithWallet = function (_a) {
+        var hexString = _a.hexString, rawTxs = _a.rawTxs, sigHashType = _a.sigHashType;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.unloadWallet = function (_a) {
+        var walletName = _a.walletName;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.walletCreateFundedPsbt = function (_a) {
+        var txs = _a.txs, amounts = _a.amounts, lockTime = _a.lockTime, options = _a.options, bip32derivs = _a.bip32derivs;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.walletLock = function (_a) { return this.callThroughToRpc(arguments); };
+    ;
+    RPCServices.prototype.walletPassphrase = function (_a) {
+        var passphrase = _a.passphrase, timeout = _a.timeout;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.walletPassphraseChange = function (_a) {
+        var oldPass = _a.oldPass, newPass = _a.newPass;
+        return this.callThroughToRpc(arguments);
+    };
+    ;
+    RPCServices.prototype.walletProcessPsbt = function (_a) {
+        var pbst = _a.pbst, sign = _a.sign, sigHashType = _a.sigHashType, bip32derivs = _a.bip32derivs;
+        return this.callThroughToRpc(arguments);
     };
-    function callThroughToRpc(args) {
-        var argArr = Array.prototype.slice.call(args);
-        //expect arg array to be a single object
-        if (argArr.length > 1 && typeof argArr[0] !== 'object') {
-            throw new Error("callThroughToRpc received unknown params: " + JSON.stringify(argArr));
-        }
-        var paramArr = [];
-        if (argArr.length > 0) {
-            //get the ordered keys of the object
-            var argObj_1 = argArr[0];
-            var orderedKeys = Reflect.ownKeys(argObj_1);
-            //create an ordered array of just values
-            paramArr = orderedKeys.map(function (value, index, arr) { return argObj_1[value]; });
-        }
-        return callRpc(args.callee.name.toLowerCase(), paramArr);
-    }
-}
-exports.rpcServices = rpcServices;
-//# sourceMappingURL=rpcServices.js.map
\ No newline at end of file
+    ;
+    return RPCServices;
+}());
+exports.RPCServices = RPCServices;
+//# sourceMappingURL=RPCServices.js.map
\ No newline at end of file
Index: dist/rpcServices.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { AssetAllocationBalanceQuery, AssetAllocationBalanceQueryWithGuid, AssetAllocationSend, EthHeaders, ListAssetIndexOptions, ListAssetOptions, PbstPayloadInfo, RawTx, TpsRawTx, Transaction, TxHeader } from \"./index\";\nexport declare function rpcServices(callRpc: any): {\n    getBestBlockHash(): Promise<any>;\n    getBlock({ blockHash, verbosity }: {\n        blockHash: string;\n        verbosity?: number;\n    }): Promise<any>;\n    getBlockchainInfo(): Promise<any>;\n    getBlockCount(): Promise<any>;\n    getBlockFilter({ blockHash, filterType }: {\n        blockHash: string;\n        filterType?: string;\n    }): Promise<any>;\n    getBlockHash({ height }: {\n        height: number;\n    }): Promise<any>;\n    getBlockHeader({ blockHash, verbose }: {\n        blockHash: string;\n        verbose?: number;\n    }): Promise<any>;\n    getBlockStats({ hashOrHeight, stats }: {\n        hashOrHeight: string;\n        stats?: number;\n    }): Promise<any>;\n    getChainTips({ count, branchLength }: {\n        count?: number;\n        branchLength?: number;\n    }): Promise<any>;\n    getChainTxStats({ nBlocks, blockHash }: {\n        nBlocks?: number;\n        blockHash?: number;\n    }): Promise<any>;\n    getDifficulty(): Promise<any>;\n    getMemPoolAncestors({ txid, verbose }: {\n        txid: string;\n        verbose?: number;\n    }): Promise<any>;\n    getMemPoolDescendants({ txid, verbose }: {\n        txid: string;\n        verbose?: number;\n    }): Promise<any>;\n    getMemPoolEntry({ txid }: {\n        txid: string;\n    }): Promise<any>;\n    getMemPoolInfo(): Promise<any>;\n    getRawMemPool({ verbose }: {\n        verbose?: number;\n    }): Promise<any>;\n    getTxOut({ txid, voutNumber, includeMempool }: {\n        txid: string;\n        voutNumber: number;\n        includeMempool?: boolean;\n    }): Promise<any>;\n    getTxOutProof({ txids, blockHash }: {\n        txids: string[];\n        blockHash: string;\n    }): Promise<any>;\n    getTxOutSetInfo(): Promise<any>;\n    preciousBlock({ blockHash }: {\n        blockHash: string;\n    }): Promise<any>;\n    pruneBlockchain({ blockHeight }: {\n        blockHeight: number;\n    }): Promise<any>;\n    saveMemPool(): Promise<any>;\n    scanTxOutSet({ action, scanObjects }: {\n        action: string;\n        scanObjects: any[];\n    }): Promise<any>;\n    verifyChain({ checkLevel, numberOfBlocksToCheck }: {\n        checkLevel?: number;\n        numberOfBlocksToCheck?: number;\n    }): Promise<any>;\n    verifyTxOutProof({ proof }: {\n        proof: string;\n    }): Promise<any>;\n    getMemoryInfo({ mode }: {\n        mode?: string;\n    }): Promise<any>;\n    getRpcInfo(): Promise<any>;\n    help({ command }: {\n        command?: string;\n    }): Promise<any>;\n    logging({ includeCategories, excludeCategories }: {\n        includeCategories?: string[];\n        excludeCategories: string[];\n    }): Promise<any>;\n    stop(): Promise<any>;\n    uptime(): Promise<any>;\n    generate({ numberOfBlocks, maxTries }: {\n        numberOfBlocks: number;\n        maxTries?: number;\n    }): Promise<any>;\n    generateToAddress({ numberOfBlocks, address, maxTries }: {\n        numberOfBlocks: number;\n        address: string;\n        maxTries?: number;\n    }): Promise<any>;\n    createAuxBlock({ address }: {\n        address: string;\n    }): Promise<any>;\n    getAuxBlock({ blockHash, auxPow }: {\n        blockHash?: string;\n        auxPow?: string;\n    }): Promise<any>;\n    getBlockTemplate({ blockTemplate }: {\n        blockTemplate: string;\n    }): Promise<any>;\n    getMiningInfo(): Promise<any>;\n    getNetworkHashesPerSecond({ numberOfBlocks, blockHeight }: {\n        numberOfBlocks: number;\n        blockHeight: number;\n    }): Promise<any>;\n    prioritiseTransaction({ txid, dummy, feeDeltaInSatoshis }: {\n        txid: string;\n        dummy?: null;\n        feeDeltaInSatoshis: number;\n    }): Promise<any>;\n    submitAuxBlock({ blockHash, auxPow }: {\n        blockHash: string;\n        auxPow: string;\n    }): Promise<any>;\n    submitBlock({ hexDataToSubmit }: {\n        hexDataToSubmit: string;\n    }): Promise<any>;\n    submitHeader({ hexData }: {\n        hexData: string;\n    }): Promise<any>;\n    addNode({ nodeAddress }: {\n        nodeAddress: string;\n    }): Promise<any>;\n    clearBanned(): Promise<any>;\n    disconnectNode({ nodeAddress, nodeId }: {\n        nodeAddress: string;\n        nodeId: number;\n    }): Promise<any>;\n    getAddedNodeInfo({ nodeAddress }: {\n        nodeAddress: string;\n    }): Promise<any>;\n    getConnectionCount(): Promise<any>;\n    getNetTotals(): Promise<any>;\n    getNetworkInfo(): Promise<any>;\n    getNodeAddresses(): Promise<any>;\n    getPeerInfo(): Promise<any>;\n    getInfo(): Promise<any>;\n    listBanned(): Promise<any>;\n    ping(): Promise<any>;\n    setBan({ subnet, command, banTime }: {\n        subnet: string;\n        command: string;\n        banTime?: number;\n    }): Promise<any>;\n    analyzePsbt({ pbst }: {\n        pbst: string;\n    }): Promise<any>;\n    combinePsbt({ pbsts }: {\n        pbsts: string[];\n    }): Promise<any>;\n    combineRawTransaction({ hexs }: {\n        hexs: string[];\n    }): Promise<any>;\n    convertToPsbt({ hex, permitSigData, isWitness }: {\n        hex: string;\n        permitSigData?: number;\n        isWitness?: number;\n    }): Promise<any>;\n    createPsbt({ txHeaders, payloadInfo, locktime, replaceable }: {\n        txHeaders: TxHeader[];\n        payloadInfo: PbstPayloadInfo[];\n        locktime?: number;\n        replaceable?: number;\n    }): Promise<any>;\n    createRawTransaction({ txHeaders, payloadInfo, locktime, replaceable }: {\n        txHeaders: TxHeader[];\n        payloadInfo: PbstPayloadInfo[];\n        locktime?: number;\n        replaceable?: number;\n    }): Promise<any>;\n    decodePsbt({ pbst }: {\n        pbst: string;\n    }): Promise<any>;\n    decodeRawTransaction({ hexString, isWitness }: {\n        hexString: string;\n        isWitness: number;\n    }): Promise<any>;\n    decodeScript({ hexString }: {\n        hexString: string;\n    }): Promise<any>;\n    finalizePsbt({ pbst, extract }: {\n        pbst: string;\n        extract?: number;\n    }): Promise<any>;\n    fundRawTransaction({ hexString, options, isWitness }: {\n        hexString: string;\n        options?: number;\n        isWitness?: number;\n    }): Promise<any>;\n    getRawTransaction({ txid, verbose, blockHash }: {\n        txid: string;\n        verbose?: number;\n        blockHash?: string;\n    }): Promise<any>;\n    joinPsbts({ pbsts }: {\n        pbsts: string[];\n    }): Promise<any>;\n    sendRawTransaction({ hexString, maxFeeRate }: {\n        hexString: string;\n        maxFeeRate?: number;\n    }): Promise<any>;\n    signRawTransactionWithKey({ hexString, privateKeys, txs, sigHashType }: {\n        hexString: string;\n        privateKeys: string[];\n        txs?: Transaction[];\n        sigHashType?: string;\n    }): Promise<any>;\n    testMempoolAccept({ rawTxs, maxFeeRate }: {\n        rawTxs: string[];\n        maxFeeRate?: number;\n    }): Promise<any>;\n    utxoUpdatePsbt({ pbst }: {\n        pbst: string;\n    }): Promise<any>;\n    addressBalance({ address }: {\n        address: string;\n    }): Promise<any>;\n    assetAllocationBalance({ assetGuid, address }: {\n        assetGuid: number;\n        address: string;\n    }): Promise<any>;\n    assetAllocationBurn({ assetGuid, address, amount, ethAddress }: {\n        assetGuid: number;\n        address: string;\n        amount: number;\n        ethAddress: string;\n    }): Promise<any>;\n    assetAllocationInfo({ assetGuid, address }: {\n        assetGuid: number;\n        address: string;\n    }): Promise<any>;\n    assetAllocationLock({ assetGuid, addressFrom, txid, outputIndex, witness }: {\n        assetGuid: number;\n        addressFrom: string;\n        txid: string;\n        outputIndex: number;\n        witness?: string;\n    }): Promise<any>;\n    assetAllocationMint({ assetGuid, address, amount, blockNum, txHex, txRootHex, merkleProofHex, merkleProofPathHex, witness }: {\n        assetGuid: number;\n        address: string;\n        amount: number;\n        blockNum: number;\n        txHex: string;\n        txRootHex: string;\n        merkleProofHex: string;\n        merkleProofPathHex: string;\n        witness?: string;\n    }): Promise<any>;\n    assetAllocationSend({ assetGuid, addressFrom, addressTo, amount }: {\n        assetGuid: number;\n        addressFrom: string;\n        addressTo: string;\n        amount: number;\n    }): Promise<any>;\n    assetAllocationSenderStatus({ assetGuid, address, txid }: {\n        assetGuid: number;\n        address: string;\n        txid: string;\n    }): Promise<any>;\n    assetAllocationSendMany({ assetGuid, addressFrom, allocations, witness }: {\n        assetGuid: number;\n        addressFrom: string;\n        allocations: AssetAllocationSend[];\n        witness?: string;\n    }): Promise<any>;\n    assetInfo({ assetGuid }: {\n        assetGuid: number;\n    }): Promise<any>;\n    assetNew({ address, publicValue, contract, precision, supply, maxSupply, updateFlags, witness }: {\n        address: string;\n        publicValue: string;\n        contract: string;\n        precision: number;\n        supply: number;\n        maxSupply: number;\n        updateFlags: number;\n        witness: string;\n    }): Promise<any>;\n    assetSend({ assetGuid, addressTo, amount }: {\n        assetGuid: number;\n        addressTo: string;\n        amount: number;\n    }): Promise<any>;\n    assetSendMany({ assetGuid, allocations, witness }: {\n        assetGuid: number;\n        allocations: AssetAllocationSend[];\n        witness?: string;\n    }): Promise<any>;\n    assetTransfer({ assetGuid, address, witness }: {\n        assetGuid: number;\n        address: string;\n        witness: string;\n    }): Promise<any>;\n    assetUpdate({ assetGuid, publicValue, contract, supply, updateFlags, witness }: {\n        assetGuid: number;\n        publicValue: string;\n        contract: string;\n        supply: number;\n        updateFlags: number;\n        witness: string;\n    }): Promise<any>;\n    convertAddress({ address }: {\n        address: string;\n    }): Promise<any>;\n    getBlockHashByTxid({ txid }: {\n        txid: string;\n    }): Promise<any>;\n    getGovernanceInfo(): Promise<any>;\n    getSuperblockBudget({ index }: {\n        index: number;\n    }): Promise<any>;\n    gObject({ command }: {\n        command: string;\n    }): Promise<any>;\n    listAssetAllocationMempoolBalances({ count, from, query }: {\n        count?: number;\n        from?: number;\n        query?: AssetAllocationBalanceQuery;\n    }): Promise<any>;\n    listAssetAllocations({ count, from, query }: {\n        count?: number;\n        from?: number;\n        query?: AssetAllocationBalanceQueryWithGuid;\n    }): Promise<any>;\n    listAssetIndex({ page, options }: {\n        page?: number;\n        options?: ListAssetIndexOptions;\n    }): Promise<any>;\n    listAssetIndexAllocations({ address }: {\n        address: string;\n    }): Promise<any>;\n    listAssetIndexAssets({ address }: {\n        address: string;\n    }): Promise<any>;\n    listAssets({ count, from, options }: {\n        count?: number;\n        from?: number;\n        options?: ListAssetOptions;\n    }): Promise<any>;\n    masternode({ command }: {\n        command: string;\n    }): Promise<any>;\n    masternodeBroadcast({ command }: {\n        command: string;\n    }): Promise<any>;\n    masternodeList({ mode, filter }: {\n        mode?: string;\n        filter?: string;\n    }): Promise<any>;\n    mnSync({ command }: {\n        command: string;\n    }): Promise<any>;\n    sentinelPing({ version }: {\n        version: number;\n    }): Promise<any>;\n    spork({ command }: {\n        command: string;\n    }): Promise<any>;\n    syscoinBurn({ fundingAddress, amount, ethAddress }: {\n        fundingAddress: string;\n        amount: number;\n        ethAddress: string;\n    }): Promise<any>;\n    syscoinDecodeRawTransaction({ hexString }: {\n        hexString: number;\n    }): Promise<any>;\n    syscoinGetSpvProof({ txid, blockHash }: {\n        txid: string;\n        blockHash?: string;\n    }): Promise<any>;\n    syscoinListReceivedByAddress({}: {}): Promise<any>;\n    syscoinMint({ address, amount, blockNum, txHex, txRootHex, txMerkleProofHex, witness }: {\n        address: string;\n        amount: number;\n        blockNum: number;\n        txHex: string;\n        txRootHex: string;\n        txMerkleProofHex: string;\n        witness?: string;\n    }): Promise<any>;\n    syscoinSetEthHeaders({ headers }: {\n        headers: EthHeaders;\n    }): Promise<any>;\n    syscoinSetEthStatus({ syncStatus, highestBlock }: {\n        syncStatus: string;\n        highestBlock: number;\n    }): Promise<any>;\n    syscoinStartGeth({}: {}): Promise<any>;\n    syscoinStopGeth({}: {}): Promise<any>;\n    syscoinTxFund({ hexString, address, outputIndex }: {\n        hexString: string;\n        address: string;\n        outputIndex: number;\n    }): Promise<any>;\n    tpsTestAdd({ startTime, rawTxs }: {\n        startTime: any;\n        rawTxs?: TpsRawTx[];\n    }): Promise<any>;\n    tpsTestInfo({}: {}): Promise<any>;\n    tpsTestSetEnabled({ enabled }: {\n        enabled: number;\n    }): Promise<any>;\n    voteRaw({ mnTxHash, mnTxIndex, govHash, votSignal, vote, time, voteSig }: {\n        mnTxHash: string;\n        mnTxIndex: number;\n        govHash: string;\n        votSignal: string;\n        vote: string;\n        time: number;\n        voteSig: string;\n    }): Promise<any>;\n    createMultiSig({ numberOfRequiredSignatures, keys, addressType }: {\n        numberOfRequiredSignatures: number;\n        keys: string[];\n        addressType?: string;\n    }): Promise<any>;\n    deriveAddress({ descriptor, range }: {\n        descriptor: string;\n        range?: number;\n    }): Promise<any>;\n    estimateSmartFee({ confTarget, estimateMode }: {\n        confTarget: number;\n        estimateMode?: string;\n    }): Promise<any>;\n    getDescriptorInfo({ descriptor }: {\n        descriptor: string;\n    }): Promise<any>;\n    signMessageWithPrivKey({ privateKey, message }: {\n        privateKey: string;\n        message: string;\n    }): Promise<any>;\n    validateAddress({ address }: {\n        address: string;\n    }): Promise<any>;\n    verifyMessage({ address, signature, message }: {\n        address: string;\n        signature: string;\n        message: string;\n    }): Promise<any>;\n    abandonTransaction({ txid }: {\n        txid: string;\n    }): Promise<any>;\n    abortRescan(): Promise<any>;\n    addMultiSigAddress({ nRequired, keys, label, addressType }: {\n        nRequired: number;\n        keys: string[];\n        label?: string;\n        addressType?: string;\n    }): Promise<any>;\n    backupWallet({ destination }: {\n        destination: string;\n    }): Promise<any>;\n    bumpFee({ txid, options }: {\n        txid: string;\n        options?: any;\n    }): Promise<any>;\n    createWallet({ walletName, disablePrivKeys }: {\n        walletName: string;\n        disablePrivKeys: number;\n    }): Promise<any>;\n    dumpPrivKey({ address }: {\n        address: string;\n    }): Promise<any>;\n    dumpWallet({ fileName }: {\n        fileName: string;\n    }): Promise<any>;\n    encryptWallet({ passphrase }: {\n        passphrase: string;\n    }): Promise<any>;\n    getAddressesByLabel({ label }: {\n        label: string;\n    }): Promise<any>;\n    getAddressInfo({ address }: {\n        address: string;\n    }): Promise<any>;\n    getBalance({ dummy, minconf, includeWatchOnly }: {\n        dummy?: string;\n        minconf: number;\n        includeWatchOnly: number;\n    }): Promise<any>;\n    getNewAddress({ label, addressType }: {\n        label: string;\n        addressType: string;\n    }): Promise<any>;\n    getRawChangeAddress({ addressType }: {\n        addressType?: string;\n    }): Promise<any>;\n    getReceivedByAddress({ address, minConf }: {\n        address: string;\n        minConf?: number;\n    }): Promise<any>;\n    getReceivedByLabel({ label, minConf }: {\n        label: string;\n        minConf?: number;\n    }): Promise<any>;\n    getTransaction({ txid, includeWatchOnly }: {\n        txid: string;\n        includeWatchOnly: number;\n    }): Promise<any>;\n    getUnconfirmedBalance({}: {}): Promise<any>;\n    getWalletInfo({}: {}): Promise<any>;\n    importAddress({ address, label, rescan, p2sh }: {\n        address: string;\n        label?: string;\n        rescan?: number;\n        p2sh?: number;\n    }): Promise<any>;\n    importMulti({ requests, options }: {\n        requests: string;\n        options: any;\n    }): Promise<any>;\n    importPrivKey({ key, label, rescan }: {\n        key: string;\n        label?: string;\n        rescan?: number;\n    }): Promise<any>;\n    importPrunedFunds({ rawTx, txOutProof }: {\n        rawTx: string;\n        txOutProof: string;\n    }): Promise<any>;\n    importPubKey({ pubKey, label, rescan }: {\n        pubKey: string;\n        label?: string;\n        rescan?: number;\n    }): Promise<any>;\n    importWallet({ fileName }: {\n        fileName: string;\n    }): Promise<any>;\n    keypoolRefill({ newSize }: {\n        newSize?: number;\n    }): Promise<any>;\n    listAddressGroupings({}: {}): Promise<any>;\n    listLabels({ purpose }: {\n        purpose?: string;\n    }): Promise<any>;\n    listLockUnspent({}: {}): Promise<any>;\n    listReceivedByAddress({ minConf, includeEmpty, includeWatchOnly, addressFilter }: {\n        minConf?: number;\n        includeEmpty?: number;\n        includeWatchOnly?: number;\n        addressFilter?: string;\n    }): Promise<any>;\n    listReceivedByLabel({ minConf, includeEmpty, includeWatchOnly }: {\n        minConf?: number;\n        includeEmpty?: number;\n        includeWatchOnly?: number;\n    }): Promise<any>;\n    listSinceBlock({ blockHash, targetConfs, includeWatchOnly, includeRemoved }: {\n        blockHash?: string;\n        targetConfs?: number;\n        includeWatchOnly?: number;\n        includeRemoved?: number;\n    }): Promise<any>;\n    listTransactions({ label, count, skip, includeWatchOnly }: {\n        label?: string;\n        count?: number;\n        skip?: number;\n        includeWatchOnly?: number;\n    }): Promise<any>;\n    listUnspent({ minConf, maxConf, addresses, includeUnsafe, query, options }: {\n        minConf?: number;\n        maxConf?: number;\n        addresses?: string[];\n        includeUnsafe?: number;\n        query?: any;\n        options?: any;\n    }): Promise<any>;\n    listWalletDir({}: {}): Promise<any>;\n    listWallets({}: {}): Promise<any>;\n    loadWallet({ fileName }: {\n        fileName: string;\n    }): Promise<any>;\n    lockUnspent({ unlock, txs }: {\n        unlock: number;\n        txs?: {\n            txid: string;\n            vout: number;\n        }[];\n    }): Promise<any>;\n    removePrunedFunds({ txid }: {\n        txid: string;\n    }): Promise<any>;\n    rescanBlockchain({ start, stop }: {\n        start?: number;\n        stop?: number;\n    }): Promise<any>;\n    sendMany({ dummy, amounts, minConf, comment, subtractFeeFrom, replaceable, confTarget, estimateMode }: {\n        dummy: string;\n        amounts: {\n            [address: string]: number;\n        }[];\n        minConf?: number;\n        comment?: string;\n        subtractFeeFrom?: string[];\n        replaceable?: boolean;\n        confTarget?: number;\n        estimateMode?: string;\n    }): Promise<any>;\n    sendToAddress({ address, amount, minConf, comment, comment_to, subtractFeeFromAmount, replaceable, confTarget, estimateMode }: {\n        address: string;\n        amount: number;\n        minConf?: number;\n        comment?: string;\n        comment_to?: string;\n        subtractFeeFromAmount?: number;\n        replaceable?: boolean;\n        confTarget?: number;\n        estimateMode?: string;\n    }): Promise<any>;\n    setHdSeed({ newKeyPool, seed }: {\n        newKeyPool?: number;\n        seed?: string;\n    }): Promise<any>;\n    setLabel({ address, label }: {\n        address: string;\n        label: string;\n    }): Promise<any>;\n    setTxFee({ amount }: {\n        amount: number;\n    }): Promise<any>;\n    signMessage({ address, message }: {\n        address: string;\n        message: string;\n    }): Promise<any>;\n    signRawTransactionWithWallet({ hexString, rawTxs, sigHashType }: {\n        hexString: string;\n        rawTxs?: RawTx[];\n        sigHashType?: string;\n    }): Promise<any>;\n    unloadWallet({ walletName }: {\n        walletName?: string;\n    }): Promise<any>;\n    walletCreateFundedPsbt({ txs, amounts, lockTime, options, bip32derivs }: {\n        txs: any;\n        amounts: any;\n        lockTime?: any;\n        options?: any;\n        bip32derivs?: any;\n    }): Promise<any>;\n    walletLock({}: {}): Promise<any>;\n    walletPassphrase({ passphrase, timeout }: {\n        passphrase: string;\n        timeout: number;\n    }): Promise<any>;\n    walletPassphraseChange({ oldPass, newPass }: {\n        oldPass: string;\n        newPass: string;\n    }): Promise<any>;\n    walletProcessPsbt({ pbst, sign, sigHashType, bip32derivs }: {\n        pbst: string;\n        sign?: number;\n        sigHashType?: string;\n        bip32derivs?: number;\n    }): Promise<any>;\n    callThroughToRpc: (args: any) => Promise<any>;\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/rpcServices.d.ts	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ dist/rpcServices.d.ts	(date 1558122134000)
@@ -1,5 +1,8 @@
 import { AssetAllocationBalanceQuery, AssetAllocationBalanceQueryWithGuid, AssetAllocationSend, EthHeaders, ListAssetIndexOptions, ListAssetOptions, PbstPayloadInfo, RawTx, TpsRawTx, Transaction, TxHeader } from "./index";
-export declare function rpcServices(callRpc: any): {
+export declare class RPCServices {
+    private callRpc;
+    constructor(callRpc: any);
+    callThroughToRpc(args: any): Promise<any>;
     getBestBlockHash(): Promise<any>;
     getBlock({ blockHash, verbosity }: {
         blockHash: string;
@@ -52,7 +55,7 @@
         includeMempool?: boolean;
     }): Promise<any>;
     getTxOutProof({ txids, blockHash }: {
-        txids: string[];
+        txids: Array<string>;
         blockHash: string;
     }): Promise<any>;
     getTxOutSetInfo(): Promise<any>;
@@ -65,7 +68,7 @@
     saveMemPool(): Promise<any>;
     scanTxOutSet({ action, scanObjects }: {
         action: string;
-        scanObjects: any[];
+        scanObjects: Array<any>;
     }): Promise<any>;
     verifyChain({ checkLevel, numberOfBlocksToCheck }: {
         checkLevel?: number;
@@ -82,8 +85,8 @@
         command?: string;
     }): Promise<any>;
     logging({ includeCategories, excludeCategories }: {
-        includeCategories?: string[];
-        excludeCategories: string[];
+        includeCategories?: Array<string>;
+        excludeCategories: Array<string>;
     }): Promise<any>;
     stop(): Promise<any>;
     uptime(): Promise<any>;
@@ -154,10 +157,10 @@
         pbst: string;
     }): Promise<any>;
     combinePsbt({ pbsts }: {
-        pbsts: string[];
+        pbsts: Array<string>;
     }): Promise<any>;
     combineRawTransaction({ hexs }: {
-        hexs: string[];
+        hexs: Array<string>;
     }): Promise<any>;
     convertToPsbt({ hex, permitSigData, isWitness }: {
         hex: string;
@@ -165,14 +168,14 @@
         isWitness?: number;
     }): Promise<any>;
     createPsbt({ txHeaders, payloadInfo, locktime, replaceable }: {
-        txHeaders: TxHeader[];
-        payloadInfo: PbstPayloadInfo[];
+        txHeaders: Array<TxHeader>;
+        payloadInfo: Array<PbstPayloadInfo>;
         locktime?: number;
         replaceable?: number;
     }): Promise<any>;
     createRawTransaction({ txHeaders, payloadInfo, locktime, replaceable }: {
-        txHeaders: TxHeader[];
-        payloadInfo: PbstPayloadInfo[];
+        txHeaders: Array<TxHeader>;
+        payloadInfo: Array<PbstPayloadInfo>;
         locktime?: number;
         replaceable?: number;
     }): Promise<any>;
@@ -201,7 +204,7 @@
         blockHash?: string;
     }): Promise<any>;
     joinPsbts({ pbsts }: {
-        pbsts: string[];
+        pbsts: Array<string>;
     }): Promise<any>;
     sendRawTransaction({ hexString, maxFeeRate }: {
         hexString: string;
@@ -209,12 +212,12 @@
     }): Promise<any>;
     signRawTransactionWithKey({ hexString, privateKeys, txs, sigHashType }: {
         hexString: string;
-        privateKeys: string[];
-        txs?: Transaction[];
+        privateKeys: Array<string>;
+        txs?: Array<Transaction>;
         sigHashType?: string;
     }): Promise<any>;
     testMempoolAccept({ rawTxs, maxFeeRate }: {
-        rawTxs: string[];
+        rawTxs: Array<string>;
         maxFeeRate?: number;
     }): Promise<any>;
     utxoUpdatePsbt({ pbst }: {
@@ -269,7 +272,7 @@
     assetAllocationSendMany({ assetGuid, addressFrom, allocations, witness }: {
         assetGuid: number;
         addressFrom: string;
-        allocations: AssetAllocationSend[];
+        allocations: Array<AssetAllocationSend>;
         witness?: string;
     }): Promise<any>;
     assetInfo({ assetGuid }: {
@@ -292,7 +295,7 @@
     }): Promise<any>;
     assetSendMany({ assetGuid, allocations, witness }: {
         assetGuid: number;
-        allocations: AssetAllocationSend[];
+        allocations: Array<AssetAllocationSend>;
         witness?: string;
     }): Promise<any>;
     assetTransfer({ assetGuid, address, witness }: {
@@ -403,7 +406,7 @@
     }): Promise<any>;
     tpsTestAdd({ startTime, rawTxs }: {
         startTime: any;
-        rawTxs?: TpsRawTx[];
+        rawTxs?: Array<TpsRawTx>;
     }): Promise<any>;
     tpsTestInfo({}: {}): Promise<any>;
     tpsTestSetEnabled({ enabled }: {
@@ -420,7 +423,7 @@
     }): Promise<any>;
     createMultiSig({ numberOfRequiredSignatures, keys, addressType }: {
         numberOfRequiredSignatures: number;
-        keys: string[];
+        keys: Array<string>;
         addressType?: string;
     }): Promise<any>;
     deriveAddress({ descriptor, range }: {
@@ -452,7 +455,7 @@
     abortRescan(): Promise<any>;
     addMultiSigAddress({ nRequired, keys, label, addressType }: {
         nRequired: number;
-        keys: string[];
+        keys: Array<string>;
         label?: string;
         addressType?: string;
     }): Promise<any>;
@@ -507,7 +510,7 @@
         includeWatchOnly: number;
     }): Promise<any>;
     getUnconfirmedBalance({}: {}): Promise<any>;
-    getWalletInfo({}: {}): Promise<any>;
+    getWalletInfo(): Promise<any>;
     importAddress({ address, label, rescan, p2sh }: {
         address: string;
         label?: string;
@@ -569,7 +572,7 @@
     listUnspent({ minConf, maxConf, addresses, includeUnsafe, query, options }: {
         minConf?: number;
         maxConf?: number;
-        addresses?: string[];
+        addresses?: Array<string>;
         includeUnsafe?: number;
         query?: any;
         options?: any;
@@ -581,10 +584,10 @@
     }): Promise<any>;
     lockUnspent({ unlock, txs }: {
         unlock: number;
-        txs?: {
+        txs?: Array<{
             txid: string;
             vout: number;
-        }[];
+        }>;
     }): Promise<any>;
     removePrunedFunds({ txid }: {
         txid: string;
@@ -595,12 +598,12 @@
     }): Promise<any>;
     sendMany({ dummy, amounts, minConf, comment, subtractFeeFrom, replaceable, confTarget, estimateMode }: {
         dummy: string;
-        amounts: {
+        amounts: Array<{
             [address: string]: number;
-        }[];
+        }>;
         minConf?: number;
         comment?: string;
-        subtractFeeFrom?: string[];
+        subtractFeeFrom?: Array<string>;
         replaceable?: boolean;
         confTarget?: number;
         estimateMode?: string;
@@ -633,7 +636,7 @@
     }): Promise<any>;
     signRawTransactionWithWallet({ hexString, rawTxs, sigHashType }: {
         hexString: string;
-        rawTxs?: RawTx[];
+        rawTxs?: Array<RawTx>;
         sigHashType?: string;
     }): Promise<any>;
     unloadWallet({ walletName }: {
@@ -661,5 +664,4 @@
         sigHashType?: string;
         bip32derivs?: number;
     }): Promise<any>;
-    callThroughToRpc: (args: any) => Promise<any>;
-};
+}
Index: src/rpcServices.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { AssetAllocationBalanceQuery, AssetAllocationBalanceQueryWithGuid, AssetAllocationSend, EthHeaders, ListAssetIndexOptions, ListAssetOptions, PbstPayloadInfo, RawTx, TpsRawTx, Transaction, TxHeader } from \"./index\";\n\nexport function rpcServices(callRpc) {\n  return {\n    // @formatter:off\n    // == Blockchain ==\n    getBestBlockHash(): Promise<any> { return callThroughToRpc(arguments) },\n    getBlock({blockHash, verbosity}: { blockHash: string, verbosity?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getBlockchainInfo(): Promise<any> { return callThroughToRpc(arguments) },\n    getBlockCount(): Promise<any> { return callThroughToRpc(arguments) },\n    getBlockFilter({blockHash, filterType}: { blockHash: string, filterType?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getBlockHash({height}: { height: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getBlockHeader({blockHash, verbose}: { blockHash: string, verbose?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getBlockStats({hashOrHeight, stats}: { hashOrHeight: string, stats?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getChainTips({count, branchLength}: { count?: number, branchLength?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getChainTxStats({nBlocks, blockHash}: { nBlocks?: number, blockHash?: number}): Promise<any> { return callThroughToRpc(arguments) },\n    getDifficulty(): Promise<any> { return callThroughToRpc(arguments) },\n    getMemPoolAncestors({txid, verbose}: { txid: string, verbose?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getMemPoolDescendants({txid, verbose}: { txid: string, verbose?: number}): Promise<any> { return callThroughToRpc(arguments) },\n    getMemPoolEntry({txid}: { txid: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getMemPoolInfo(): Promise<any> { return callThroughToRpc(arguments) },\n    getRawMemPool({verbose}: { verbose?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getTxOut({txid, voutNumber, includeMempool}: { txid: string, voutNumber: number, includeMempool?: boolean }): Promise<any> { return callThroughToRpc(arguments) },\n    getTxOutProof({txids, blockHash}: { txids: Array<string>, blockHash: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getTxOutSetInfo(): Promise<any> { return callThroughToRpc(arguments) },\n    preciousBlock({blockHash}: { blockHash: string }): Promise<any> { return callThroughToRpc(arguments) },\n    pruneBlockchain({blockHeight}: { blockHeight: number }): Promise<any> { return callThroughToRpc(arguments) },\n    saveMemPool(): Promise<any> { return callThroughToRpc(arguments) },\n    scanTxOutSet({action, scanObjects}: { action: string, scanObjects: Array<any>}) { return callThroughToRpc(arguments) },\n    verifyChain({checkLevel, numberOfBlocksToCheck}: { checkLevel?: number, numberOfBlocksToCheck?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    verifyTxOutProof({proof}: { proof: string }): Promise<any> { return callThroughToRpc(arguments) },\n\n    // == Control ==\n    getMemoryInfo({mode}: { mode?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getRpcInfo(): Promise<any> { return callThroughToRpc(arguments) },\n    help({command}: { command?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    logging({includeCategories, excludeCategories}: { includeCategories?: Array<string>, excludeCategories: Array<string> }): Promise<any> { return callThroughToRpc(arguments) },\n    stop(): Promise<any> { return callThroughToRpc(arguments) },\n    uptime(): Promise<any> { return callThroughToRpc(arguments) },\n\n    // == Generating ==\n    generate({numberOfBlocks, maxTries}: { numberOfBlocks: number, maxTries?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    generateToAddress({numberOfBlocks, address, maxTries}: { numberOfBlocks: number, address: string, maxTries?: number }): Promise<any> { return callThroughToRpc(arguments) },\n\n    // == Mining ==\n    createAuxBlock({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getAuxBlock({blockHash, auxPow}: { blockHash?: string, auxPow?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getBlockTemplate({blockTemplate}: { blockTemplate: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getMiningInfo(): Promise<any> { return callThroughToRpc(arguments) },\n    getNetworkHashesPerSecond({numberOfBlocks, blockHeight}: { numberOfBlocks: number, blockHeight: number }): Promise<any> { return callThroughToRpc(arguments) },\n    prioritiseTransaction({txid, dummy, feeDeltaInSatoshis}: { txid: string, dummy?: null, feeDeltaInSatoshis: number }): Promise<any> { return callThroughToRpc(arguments) },\n    submitAuxBlock({blockHash, auxPow}: { blockHash: string, auxPow: string }): Promise<any> { return callThroughToRpc(arguments) },\n    submitBlock({hexDataToSubmit}: { hexDataToSubmit: string }): Promise<any> { return callThroughToRpc(arguments) },\n    submitHeader({hexData}: { hexData: string }): Promise<any> { return callThroughToRpc(arguments) },\n\n    // == Network ==\n    addNode({nodeAddress}: { nodeAddress: string }): Promise<any> { return callThroughToRpc(arguments) },\n    clearBanned(): Promise<any> { return callThroughToRpc(arguments) },\n    disconnectNode({nodeAddress, nodeId}: { nodeAddress: string, nodeId: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getAddedNodeInfo({nodeAddress}: { nodeAddress: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getConnectionCount(): Promise<any> { return callThroughToRpc(arguments) },\n    getNetTotals(): Promise<any> { return callThroughToRpc(arguments) },\n    getNetworkInfo(): Promise<any> { return callThroughToRpc(arguments) },\n    getNodeAddresses(): Promise<any> { return callThroughToRpc(arguments) },\n    getPeerInfo(): Promise<any> { return callThroughToRpc(arguments) },\n    getInfo(): Promise<any> { return callThroughToRpc(arguments) },\n    listBanned(): Promise<any> { return callThroughToRpc(arguments) },\n    ping(): Promise<any> { return callThroughToRpc(arguments) },\n    setBan({subnet,command,banTime}: { subnet: string, command: string, banTime?: number}):Promise<any> { return callThroughToRpc(arguments) },\n\n    // == Rawtransactions ==\n    analyzePsbt({pbst}: { pbst: string }): Promise<any> { return callThroughToRpc(arguments) },\n    combinePsbt({pbsts}: { pbsts: Array<string> }): Promise<any> { return callThroughToRpc(arguments) },\n    combineRawTransaction({hexs}: { hexs: Array<string> }): Promise<any> { return callThroughToRpc(arguments) },\n    convertToPsbt({hex, permitSigData, isWitness}: { hex: string, permitSigData?: number, isWitness?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    createPsbt({txHeaders, payloadInfo, locktime, replaceable}: { txHeaders: Array<TxHeader>, payloadInfo: Array<PbstPayloadInfo>, locktime?: number, replaceable?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    createRawTransaction({txHeaders, payloadInfo, locktime, replaceable}: { txHeaders: Array<TxHeader>, payloadInfo: Array<PbstPayloadInfo>, locktime?: number, replaceable?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    decodePsbt({pbst}: { pbst: string }): Promise<any> { return callThroughToRpc(arguments) },\n    decodeRawTransaction({hexString, isWitness}: { hexString: string, isWitness: number }): Promise<any> { return callThroughToRpc(arguments) },\n    decodeScript({hexString}: { hexString: string }): Promise<any> { return callThroughToRpc(arguments) },\n    finalizePsbt({pbst, extract}: { pbst: string, extract?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    fundRawTransaction({hexString, options, isWitness}: { hexString: string, options?: number, isWitness?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getRawTransaction({txid, verbose, blockHash}: { txid: string, verbose?: number, blockHash?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    joinPsbts({pbsts}: { pbsts: Array<string> }): Promise<any> { return callThroughToRpc(arguments) },\n    sendRawTransaction({hexString, maxFeeRate}: { hexString: string, maxFeeRate?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    signRawTransactionWithKey({hexString, privateKeys, txs, sigHashType}: { hexString: string, privateKeys: Array<string>, txs?: Array<Transaction>, sigHashType?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    testMempoolAccept({rawTxs, maxFeeRate}: { rawTxs: Array<string>, maxFeeRate?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    utxoUpdatePsbt({pbst}: { pbst: string }): Promise<any> { return callThroughToRpc(arguments) },\n\n    // == Syscoin ==\n    addressBalance({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetAllocationBalance({assetGuid, address}: { assetGuid: number, address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetAllocationBurn({assetGuid, address, amount, ethAddress}: { assetGuid: number, address: string, amount: number, ethAddress: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetAllocationInfo({assetGuid, address}: { assetGuid: number, address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetAllocationLock({assetGuid, addressFrom, txid, outputIndex, witness}: { assetGuid: number, addressFrom: string, txid: string, outputIndex: number, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetAllocationMint({assetGuid, address, amount, blockNum, txHex, txRootHex, merkleProofHex, merkleProofPathHex, witness}: { assetGuid: number, address: string, amount: number, blockNum: number, txHex: string, txRootHex: string, merkleProofHex: string, merkleProofPathHex: string, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetAllocationSend({assetGuid, addressFrom, addressTo, amount}: { assetGuid: number, addressFrom: string, addressTo: string, amount: number }): Promise<any> { return callThroughToRpc(arguments) },\n    assetAllocationSenderStatus({assetGuid, address, txid}: { assetGuid: number, address: string, txid: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetAllocationSendMany({assetGuid, addressFrom, allocations, witness}: { assetGuid: number, addressFrom: string, allocations: Array<AssetAllocationSend>, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetInfo({assetGuid}: { assetGuid: number }): Promise<any> { return callThroughToRpc(arguments) },\n    assetNew({address, publicValue, contract, precision, supply, maxSupply, updateFlags, witness}: { address: string, publicValue: string, contract: string, precision: number, supply: number, maxSupply: number, updateFlags: number, witness: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetSend({assetGuid, addressTo, amount}: { assetGuid: number, addressTo: string, amount: number }): Promise<any> { return callThroughToRpc(arguments) },\n    assetSendMany({assetGuid, allocations, witness}: { assetGuid: number, allocations: Array<AssetAllocationSend>, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetTransfer({assetGuid, address, witness}: { assetGuid: number, address: string, witness: string }): Promise<any> { return callThroughToRpc(arguments) },\n    assetUpdate({assetGuid, publicValue, contract, supply, updateFlags, witness}: { assetGuid: number, publicValue: string, contract: string, supply: number, updateFlags: number, witness: string }): Promise<any> { return callThroughToRpc(arguments) },\n    convertAddress({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getBlockHashByTxid({txid}: { txid: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getGovernanceInfo(): Promise<any> { return callThroughToRpc(arguments) },\n    getSuperblockBudget({index}: { index: number }): Promise<any> { return callThroughToRpc(arguments) },\n    gObject({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },\n    listAssetAllocationMempoolBalances({count, from, query}: { count?: number, from?: number, query?: AssetAllocationBalanceQuery }): Promise<any> { return callThroughToRpc(arguments) },\n    listAssetAllocations({count, from, query}: { count?: number, from?: number, query?: AssetAllocationBalanceQueryWithGuid }): Promise<any> { return callThroughToRpc(arguments) },\n    listAssetIndex({page, options}: { page?: number, options?: ListAssetIndexOptions }): Promise<any> { return callThroughToRpc(arguments) },\n    listAssetIndexAllocations({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    listAssetIndexAssets({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    listAssets({count, from, options}: { count?: number, from?: number, options?: ListAssetOptions }): Promise<any> { return callThroughToRpc(arguments) },\n    masternode({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },\n    masternodeBroadcast({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },\n    masternodeList({mode, filter}: { mode?: string, filter?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    mnSync({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },\n    sentinelPing({version}: { version: number }): Promise<any> { return callThroughToRpc(arguments) },\n    spork({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinBurn({fundingAddress, amount, ethAddress}: { fundingAddress: string, amount: number, ethAddress: string }): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinDecodeRawTransaction({hexString}: { hexString: number }): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinGetSpvProof({txid, blockHash}: { txid: string, blockHash?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinListReceivedByAddress({}: {}): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinMint({address, amount, blockNum, txHex, txRootHex, txMerkleProofHex, witness}: { address: string, amount: number, blockNum: number, txHex: string, txRootHex: string, txMerkleProofHex: string, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinSetEthHeaders({headers}: { headers: EthHeaders }): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinSetEthStatus({syncStatus, highestBlock}: { syncStatus: string, highestBlock: number }): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinStartGeth({}: {}): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinStopGeth({}: {}): Promise<any> { return callThroughToRpc(arguments) },\n    syscoinTxFund({hexString, address, outputIndex}: { hexString: string, address: string, outputIndex: number }): Promise<any>{ return callThroughToRpc(arguments) },\n    tpsTestAdd({startTime, rawTxs}: { startTime, rawTxs?: Array<TpsRawTx> }): Promise<any> { return callThroughToRpc(arguments) },\n    tpsTestInfo({}: {}): Promise<any> { return callThroughToRpc(arguments) },\n    tpsTestSetEnabled({enabled}: { enabled: number }): Promise<any> { return callThroughToRpc(arguments) },\n    voteRaw({mnTxHash, mnTxIndex, govHash, votSignal, vote, time, voteSig}: { mnTxHash: string, mnTxIndex: number, govHash: string, votSignal: string, vote: string, time: number, voteSig: string }): Promise<any>{ return callThroughToRpc(arguments) },\n\n    // == Util ==\n    createMultiSig({numberOfRequiredSignatures, keys, addressType}: { numberOfRequiredSignatures: number, keys: Array<string>, addressType?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    deriveAddress({descriptor, range}: { descriptor: string, range?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    estimateSmartFee({confTarget, estimateMode}: { confTarget: number, estimateMode?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getDescriptorInfo({descriptor}: { descriptor: string }): Promise<any> { return callThroughToRpc(arguments) },\n    signMessageWithPrivKey({privateKey, message}: { privateKey: string, message: string }): Promise<any> { return callThroughToRpc(arguments) },\n    validateAddress({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    verifyMessage({address, signature, message}: { address: string, signature: string, message: string }): Promise<any> { return callThroughToRpc(arguments) },\n\n    // == Wallet ==\n    abandonTransaction({txid}: { txid: string }): Promise<any> { return callThroughToRpc(arguments) },\n    abortRescan(): Promise<any> { return callThroughToRpc(arguments) },\n    addMultiSigAddress({nRequired, keys, label, addressType}: { nRequired: number, keys: Array<string>, label?: string, addressType?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    backupWallet({destination}: { destination: string }): Promise<any> { return callThroughToRpc(arguments) },\n    bumpFee({txid, options}: { txid: string, options?: any }): Promise<any> { return callThroughToRpc(arguments) },\n    createWallet({walletName, disablePrivKeys}: { walletName: string, disablePrivKeys: number }): Promise<any> { return callThroughToRpc(arguments) },\n    dumpPrivKey({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    dumpWallet({fileName}: { fileName: string }): Promise<any> { return callThroughToRpc(arguments) },\n    encryptWallet({passphrase}: { passphrase: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getAddressesByLabel({label}: { label: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getAddressInfo({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getBalance({dummy, minconf, includeWatchOnly}: { dummy?: string, minconf: number, includeWatchOnly: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getNewAddress({label, addressType}: { label: string, addressType: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getRawChangeAddress({addressType}: { addressType?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    getReceivedByAddress({address, minConf}: { address: string, minConf?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getReceivedByLabel({label, minConf}: { label: string, minConf?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getTransaction({txid, includeWatchOnly}: { txid: string, includeWatchOnly: number }): Promise<any> { return callThroughToRpc(arguments) },\n    getUnconfirmedBalance({}: {}): Promise<any>{ return callThroughToRpc(arguments) },\n    getWalletInfo({}: {}): Promise<any>{ return callThroughToRpc(arguments) },\n    importAddress({address, label, rescan, p2sh}: { address: string, label?: string, rescan?: number, p2sh?: number }): Promise<any>{ return callThroughToRpc(arguments) },\n    importMulti({requests, options}: { requests: string, options: any }): Promise<any> { return callThroughToRpc(arguments) },\n    importPrivKey({key, label, rescan}: { key: string, label?: string, rescan?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    importPrunedFunds({rawTx, txOutProof}: { rawTx: string, txOutProof: string }): Promise<any> { return callThroughToRpc(arguments) },\n    importPubKey({pubKey, label, rescan}: { pubKey: string, label?: string, rescan?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    importWallet({fileName}: { fileName: string }): Promise<any>{ return callThroughToRpc(arguments) },\n    keypoolRefill({newSize}: { newSize?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    listAddressGroupings({}: {}): Promise<any>{ return callThroughToRpc(arguments) },\n    listLabels({purpose}: { purpose?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    listLockUnspent({}: {}): Promise<any> { return callThroughToRpc(arguments) },\n    listReceivedByAddress({minConf, includeEmpty, includeWatchOnly, addressFilter}: { minConf?: number, includeEmpty?: number, includeWatchOnly?: number, addressFilter?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    listReceivedByLabel({minConf, includeEmpty, includeWatchOnly}: { minConf?: number, includeEmpty?: number, includeWatchOnly?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    listSinceBlock({blockHash, targetConfs, includeWatchOnly, includeRemoved}: { blockHash?: string, targetConfs?: number, includeWatchOnly?: number, includeRemoved?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    listTransactions({label, count, skip, includeWatchOnly}: { label?: string, count?: number, skip?: number, includeWatchOnly?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    listUnspent({minConf, maxConf, addresses, includeUnsafe, query, options}: { minConf?: number, maxConf?: number, addresses?: Array<string>, includeUnsafe?: number, query?: any, options?: any }): Promise<any> { return callThroughToRpc(arguments) },\n    listWalletDir({}: {}): Promise<any> { return callThroughToRpc(arguments) },\n    listWallets({}: {}): Promise<any> { return callThroughToRpc(arguments) },\n    loadWallet({fileName}: { fileName: string }): Promise<any> { return callThroughToRpc(arguments) },\n    lockUnspent({unlock, txs}: { unlock: number, txs?: Array<{ txid: string, vout: number }> }): Promise<any> { return callThroughToRpc(arguments) },\n    removePrunedFunds({txid}: { txid: string }): Promise<any> { return callThroughToRpc(arguments) },\n    rescanBlockchain({start, stop}: { start?: number, stop?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    sendMany({dummy, amounts, minConf, comment, subtractFeeFrom, replaceable, confTarget, estimateMode}: { dummy: string, amounts: Array<{ [address: string]: number }>, minConf?: number, comment?: string, subtractFeeFrom?: Array<string>, replaceable?: boolean, confTarget?: number, estimateMode?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    sendToAddress({address, amount, minConf, comment, comment_to, subtractFeeFromAmount, replaceable, confTarget, estimateMode}: { address: string, amount: number, minConf?: number, comment?: string, comment_to?: string, subtractFeeFromAmount?: number, replaceable?: boolean, confTarget?: number, estimateMode?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    setHdSeed({newKeyPool, seed}: { newKeyPool?: number, seed?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    setLabel({address, label}: { address: string, label: string }): Promise<any> { return callThroughToRpc(arguments) },\n    setTxFee({amount}: { amount: number }): Promise<any> { return callThroughToRpc(arguments) },\n    signMessage({address, message}: { address: string, message: string }): Promise<any> { return callThroughToRpc(arguments) },\n    signRawTransactionWithWallet({hexString, rawTxs, sigHashType}: { hexString: string, rawTxs?: Array<RawTx>, sigHashType?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    unloadWallet({walletName}: { walletName?: string }): Promise<any> { return callThroughToRpc(arguments) },\n    walletCreateFundedPsbt({txs, amounts, lockTime, options, bip32derivs}: { txs: any, amounts: any, lockTime?: any, options?: any, bip32derivs?: any }): Promise<any> { return callThroughToRpc(arguments) },\n    walletLock({}: {}): Promise<any> { return callThroughToRpc(arguments) },\n    walletPassphrase({passphrase, timeout}: { passphrase: string, timeout: number }): Promise<any> { return callThroughToRpc(arguments) },\n    walletPassphraseChange({oldPass, newPass}: { oldPass: string, newPass: string }): Promise<any> { return callThroughToRpc(arguments) },\n    walletProcessPsbt({pbst, sign, sigHashType, bip32derivs}: { pbst: string, sign?: number, sigHashType?: string, bip32derivs?: number }): Promise<any> { return callThroughToRpc(arguments) },\n    // @formatter:on\n\n    callThroughToRpc //exposed for unit testing\n  };\n\n  function callThroughToRpc(args): Promise<any> {\n    let argArr: Array<any> = Array.prototype.slice.call(args);\n\n    //expect arg array to be a single object\n    if(argArr.length > 1 && typeof argArr[0] !== 'object') {\n      throw new Error(`callThroughToRpc received unknown params: ${JSON.stringify(argArr)}`);\n    }\n\n    let paramArr = [];\n    if(argArr.length > 0) {\n      //get the ordered keys of the object\n      let argObj = argArr[0];\n      let orderedKeys = Reflect.ownKeys(argObj);\n\n      //create an ordered array of just values\n      paramArr = orderedKeys.map((value, index, arr) => argObj[value]);\n    }\n\n    return callRpc(args.callee.name.toLowerCase(), paramArr);\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/rpcServices.ts	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ src/RPCServices.ts	(date 1558121944000)
@@ -1,226 +1,227 @@
 import { AssetAllocationBalanceQuery, AssetAllocationBalanceQueryWithGuid, AssetAllocationSend, EthHeaders, ListAssetIndexOptions, ListAssetOptions, PbstPayloadInfo, RawTx, TpsRawTx, Transaction, TxHeader } from "./index";
 
-export function rpcServices(callRpc) {
-  return {
-    // @formatter:off
-    // == Blockchain ==
-    getBestBlockHash(): Promise<any> { return callThroughToRpc(arguments) },
-    getBlock({blockHash, verbosity}: { blockHash: string, verbosity?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getBlockchainInfo(): Promise<any> { return callThroughToRpc(arguments) },
-    getBlockCount(): Promise<any> { return callThroughToRpc(arguments) },
-    getBlockFilter({blockHash, filterType}: { blockHash: string, filterType?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getBlockHash({height}: { height: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getBlockHeader({blockHash, verbose}: { blockHash: string, verbose?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getBlockStats({hashOrHeight, stats}: { hashOrHeight: string, stats?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getChainTips({count, branchLength}: { count?: number, branchLength?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getChainTxStats({nBlocks, blockHash}: { nBlocks?: number, blockHash?: number}): Promise<any> { return callThroughToRpc(arguments) },
-    getDifficulty(): Promise<any> { return callThroughToRpc(arguments) },
-    getMemPoolAncestors({txid, verbose}: { txid: string, verbose?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getMemPoolDescendants({txid, verbose}: { txid: string, verbose?: number}): Promise<any> { return callThroughToRpc(arguments) },
-    getMemPoolEntry({txid}: { txid: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getMemPoolInfo(): Promise<any> { return callThroughToRpc(arguments) },
-    getRawMemPool({verbose}: { verbose?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getTxOut({txid, voutNumber, includeMempool}: { txid: string, voutNumber: number, includeMempool?: boolean }): Promise<any> { return callThroughToRpc(arguments) },
-    getTxOutProof({txids, blockHash}: { txids: Array<string>, blockHash: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getTxOutSetInfo(): Promise<any> { return callThroughToRpc(arguments) },
-    preciousBlock({blockHash}: { blockHash: string }): Promise<any> { return callThroughToRpc(arguments) },
-    pruneBlockchain({blockHeight}: { blockHeight: number }): Promise<any> { return callThroughToRpc(arguments) },
-    saveMemPool(): Promise<any> { return callThroughToRpc(arguments) },
-    scanTxOutSet({action, scanObjects}: { action: string, scanObjects: Array<any>}) { return callThroughToRpc(arguments) },
-    verifyChain({checkLevel, numberOfBlocksToCheck}: { checkLevel?: number, numberOfBlocksToCheck?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    verifyTxOutProof({proof}: { proof: string }): Promise<any> { return callThroughToRpc(arguments) },
+export class RPCServices {
+  
+  constructor(private callRpc) {
+    console.log("callRPC", this.callRpc);
+  }
+
+  callThroughToRpc(args): Promise<any> {
+    let argArr: Array<any> = Array.prototype.slice.call(args);
+
+    //expect arg array to be a single object
+    if(argArr.length > 1 && typeof argArr[0] !== 'object') {
+      throw new Error(`this.callThroughToRpc received unknown params: ${JSON.stringify(argArr)}`);
+    }
+
+    let paramArr = [];
+    if(argArr.length > 0) {
+      //get the ordered keys of the object
+      let argObj = argArr[0];
+      let orderedKeys = Reflect.ownKeys(argObj);
+
+      //create an ordered array of just values
+      paramArr = orderedKeys.map((value, index, arr) => argObj[value]);
+    }
+
+    return this.callRpc(args.callee.name.toLowerCase(), paramArr);
+  }
+    
+  // @formatter:off
+  // == Blockchain ==
+  getBestBlockHash(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBlock({blockHash, verbosity}: { blockHash: string, verbosity?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBlockchainInfo(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBlockCount(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBlockFilter({blockHash, filterType}: { blockHash: string, filterType?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBlockHash({height}: { height: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBlockHeader({blockHash, verbose}: { blockHash: string, verbose?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBlockStats({hashOrHeight, stats}: { hashOrHeight: string, stats?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getChainTips({count, branchLength}: { count?: number, branchLength?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getChainTxStats({nBlocks, blockHash}: { nBlocks?: number, blockHash?: number}): Promise<any> { return this.callThroughToRpc(arguments) };
+  getDifficulty(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getMemPoolAncestors({txid, verbose}: { txid: string, verbose?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getMemPoolDescendants({txid, verbose}: { txid: string, verbose?: number}): Promise<any> { return this.callThroughToRpc(arguments) };
+  getMemPoolEntry({txid}: { txid: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getMemPoolInfo(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getRawMemPool({verbose}: { verbose?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getTxOut({txid, voutNumber, includeMempool}: { txid: string, voutNumber: number, includeMempool?: boolean }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getTxOutProof({txids, blockHash}: { txids: Array<string>, blockHash: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getTxOutSetInfo(): Promise<any> { return this.callThroughToRpc(arguments) };
+  preciousBlock({blockHash}: { blockHash: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  pruneBlockchain({blockHeight}: { blockHeight: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  saveMemPool(): Promise<any> { return this.callThroughToRpc(arguments) };
+  scanTxOutSet({action, scanObjects}: { action: string, scanObjects: Array<any>}) { return this.callThroughToRpc(arguments) };
+  verifyChain({checkLevel, numberOfBlocksToCheck}: { checkLevel?: number, numberOfBlocksToCheck?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  verifyTxOutProof({proof}: { proof: string }): Promise<any> { return this.callThroughToRpc(arguments) };
 
-    // == Control ==
-    getMemoryInfo({mode}: { mode?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getRpcInfo(): Promise<any> { return callThroughToRpc(arguments) },
-    help({command}: { command?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    logging({includeCategories, excludeCategories}: { includeCategories?: Array<string>, excludeCategories: Array<string> }): Promise<any> { return callThroughToRpc(arguments) },
-    stop(): Promise<any> { return callThroughToRpc(arguments) },
-    uptime(): Promise<any> { return callThroughToRpc(arguments) },
+  // == Control ==
+  getMemoryInfo({mode}: { mode?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getRpcInfo(): Promise<any> { return this.callThroughToRpc(arguments) };
+  help({command}: { command?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  logging({includeCategories, excludeCategories}: { includeCategories?: Array<string>, excludeCategories: Array<string> }): Promise<any> { return this.callThroughToRpc(arguments) };
+  stop(): Promise<any> { return this.callThroughToRpc(arguments) };
+  uptime(): Promise<any> { return this.callThroughToRpc(arguments) };
 
-    // == Generating ==
-    generate({numberOfBlocks, maxTries}: { numberOfBlocks: number, maxTries?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    generateToAddress({numberOfBlocks, address, maxTries}: { numberOfBlocks: number, address: string, maxTries?: number }): Promise<any> { return callThroughToRpc(arguments) },
+  // == Generating ==
+  generate({numberOfBlocks, maxTries}: { numberOfBlocks: number, maxTries?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  generateToAddress({numberOfBlocks, address, maxTries}: { numberOfBlocks: number, address: string, maxTries?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
 
-    // == Mining ==
-    createAuxBlock({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getAuxBlock({blockHash, auxPow}: { blockHash?: string, auxPow?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getBlockTemplate({blockTemplate}: { blockTemplate: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getMiningInfo(): Promise<any> { return callThroughToRpc(arguments) },
-    getNetworkHashesPerSecond({numberOfBlocks, blockHeight}: { numberOfBlocks: number, blockHeight: number }): Promise<any> { return callThroughToRpc(arguments) },
-    prioritiseTransaction({txid, dummy, feeDeltaInSatoshis}: { txid: string, dummy?: null, feeDeltaInSatoshis: number }): Promise<any> { return callThroughToRpc(arguments) },
-    submitAuxBlock({blockHash, auxPow}: { blockHash: string, auxPow: string }): Promise<any> { return callThroughToRpc(arguments) },
-    submitBlock({hexDataToSubmit}: { hexDataToSubmit: string }): Promise<any> { return callThroughToRpc(arguments) },
-    submitHeader({hexData}: { hexData: string }): Promise<any> { return callThroughToRpc(arguments) },
+  // == Mining ==
+  createAuxBlock({address}: { address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getAuxBlock({blockHash, auxPow}: { blockHash?: string, auxPow?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBlockTemplate({blockTemplate}: { blockTemplate: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getMiningInfo(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getNetworkHashesPerSecond({numberOfBlocks, blockHeight}: { numberOfBlocks: number, blockHeight: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  prioritiseTransaction({txid, dummy, feeDeltaInSatoshis}: { txid: string, dummy?: null, feeDeltaInSatoshis: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  submitAuxBlock({blockHash, auxPow}: { blockHash: string, auxPow: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  submitBlock({hexDataToSubmit}: { hexDataToSubmit: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  submitHeader({hexData}: { hexData: string }): Promise<any> { return this.callThroughToRpc(arguments) };
 
-    // == Network ==
-    addNode({nodeAddress}: { nodeAddress: string }): Promise<any> { return callThroughToRpc(arguments) },
-    clearBanned(): Promise<any> { return callThroughToRpc(arguments) },
-    disconnectNode({nodeAddress, nodeId}: { nodeAddress: string, nodeId: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getAddedNodeInfo({nodeAddress}: { nodeAddress: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getConnectionCount(): Promise<any> { return callThroughToRpc(arguments) },
-    getNetTotals(): Promise<any> { return callThroughToRpc(arguments) },
-    getNetworkInfo(): Promise<any> { return callThroughToRpc(arguments) },
-    getNodeAddresses(): Promise<any> { return callThroughToRpc(arguments) },
-    getPeerInfo(): Promise<any> { return callThroughToRpc(arguments) },
-    getInfo(): Promise<any> { return callThroughToRpc(arguments) },
-    listBanned(): Promise<any> { return callThroughToRpc(arguments) },
-    ping(): Promise<any> { return callThroughToRpc(arguments) },
-    setBan({subnet,command,banTime}: { subnet: string, command: string, banTime?: number}):Promise<any> { return callThroughToRpc(arguments) },
+  // == Network ==
+  addNode({nodeAddress}: { nodeAddress: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  clearBanned(): Promise<any> { return this.callThroughToRpc(arguments) };
+  disconnectNode({nodeAddress, nodeId}: { nodeAddress: string, nodeId: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getAddedNodeInfo({nodeAddress}: { nodeAddress: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getConnectionCount(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getNetTotals(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getNetworkInfo(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getNodeAddresses(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getPeerInfo(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getInfo(): Promise<any> { return this.callThroughToRpc(arguments) };
+  listBanned(): Promise<any> { return this.callThroughToRpc(arguments) };
+  ping(): Promise<any> { return this.callThroughToRpc(arguments) };
+  setBan({subnet,command,banTime}: { subnet: string, command: string, banTime?: number}):Promise<any> { return this.callThroughToRpc(arguments) };
 
-    // == Rawtransactions ==
-    analyzePsbt({pbst}: { pbst: string }): Promise<any> { return callThroughToRpc(arguments) },
-    combinePsbt({pbsts}: { pbsts: Array<string> }): Promise<any> { return callThroughToRpc(arguments) },
-    combineRawTransaction({hexs}: { hexs: Array<string> }): Promise<any> { return callThroughToRpc(arguments) },
-    convertToPsbt({hex, permitSigData, isWitness}: { hex: string, permitSigData?: number, isWitness?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    createPsbt({txHeaders, payloadInfo, locktime, replaceable}: { txHeaders: Array<TxHeader>, payloadInfo: Array<PbstPayloadInfo>, locktime?: number, replaceable?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    createRawTransaction({txHeaders, payloadInfo, locktime, replaceable}: { txHeaders: Array<TxHeader>, payloadInfo: Array<PbstPayloadInfo>, locktime?: number, replaceable?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    decodePsbt({pbst}: { pbst: string }): Promise<any> { return callThroughToRpc(arguments) },
-    decodeRawTransaction({hexString, isWitness}: { hexString: string, isWitness: number }): Promise<any> { return callThroughToRpc(arguments) },
-    decodeScript({hexString}: { hexString: string }): Promise<any> { return callThroughToRpc(arguments) },
-    finalizePsbt({pbst, extract}: { pbst: string, extract?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    fundRawTransaction({hexString, options, isWitness}: { hexString: string, options?: number, isWitness?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getRawTransaction({txid, verbose, blockHash}: { txid: string, verbose?: number, blockHash?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    joinPsbts({pbsts}: { pbsts: Array<string> }): Promise<any> { return callThroughToRpc(arguments) },
-    sendRawTransaction({hexString, maxFeeRate}: { hexString: string, maxFeeRate?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    signRawTransactionWithKey({hexString, privateKeys, txs, sigHashType}: { hexString: string, privateKeys: Array<string>, txs?: Array<Transaction>, sigHashType?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    testMempoolAccept({rawTxs, maxFeeRate}: { rawTxs: Array<string>, maxFeeRate?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    utxoUpdatePsbt({pbst}: { pbst: string }): Promise<any> { return callThroughToRpc(arguments) },
+  // == Rawtransactions ==
+  analyzePsbt({pbst}: { pbst: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  combinePsbt({pbsts}: { pbsts: Array<string> }): Promise<any> { return this.callThroughToRpc(arguments) };
+  combineRawTransaction({hexs}: { hexs: Array<string> }): Promise<any> { return this.callThroughToRpc(arguments) };
+  convertToPsbt({hex, permitSigData, isWitness}: { hex: string, permitSigData?: number, isWitness?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  createPsbt({txHeaders, payloadInfo, locktime, replaceable}: { txHeaders: Array<TxHeader>, payloadInfo: Array<PbstPayloadInfo>, locktime?: number, replaceable?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  createRawTransaction({txHeaders, payloadInfo, locktime, replaceable}: { txHeaders: Array<TxHeader>, payloadInfo: Array<PbstPayloadInfo>, locktime?: number, replaceable?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  decodePsbt({pbst}: { pbst: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  decodeRawTransaction({hexString, isWitness}: { hexString: string, isWitness: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  decodeScript({hexString}: { hexString: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  finalizePsbt({pbst, extract}: { pbst: string, extract?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  fundRawTransaction({hexString, options, isWitness}: { hexString: string, options?: number, isWitness?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getRawTransaction({txid, verbose, blockHash}: { txid: string, verbose?: number, blockHash?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  joinPsbts({pbsts}: { pbsts: Array<string> }): Promise<any> { return this.callThroughToRpc(arguments) };
+  sendRawTransaction({hexString, maxFeeRate}: { hexString: string, maxFeeRate?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  signRawTransactionWithKey({hexString, privateKeys, txs, sigHashType}: { hexString: string, privateKeys: Array<string>, txs?: Array<Transaction>, sigHashType?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  testMempoolAccept({rawTxs, maxFeeRate}: { rawTxs: Array<string>, maxFeeRate?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  utxoUpdatePsbt({pbst}: { pbst: string }): Promise<any> { return this.callThroughToRpc(arguments) };
 
-    // == Syscoin ==
-    addressBalance({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetAllocationBalance({assetGuid, address}: { assetGuid: number, address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetAllocationBurn({assetGuid, address, amount, ethAddress}: { assetGuid: number, address: string, amount: number, ethAddress: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetAllocationInfo({assetGuid, address}: { assetGuid: number, address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetAllocationLock({assetGuid, addressFrom, txid, outputIndex, witness}: { assetGuid: number, addressFrom: string, txid: string, outputIndex: number, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetAllocationMint({assetGuid, address, amount, blockNum, txHex, txRootHex, merkleProofHex, merkleProofPathHex, witness}: { assetGuid: number, address: string, amount: number, blockNum: number, txHex: string, txRootHex: string, merkleProofHex: string, merkleProofPathHex: string, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetAllocationSend({assetGuid, addressFrom, addressTo, amount}: { assetGuid: number, addressFrom: string, addressTo: string, amount: number }): Promise<any> { return callThroughToRpc(arguments) },
-    assetAllocationSenderStatus({assetGuid, address, txid}: { assetGuid: number, address: string, txid: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetAllocationSendMany({assetGuid, addressFrom, allocations, witness}: { assetGuid: number, addressFrom: string, allocations: Array<AssetAllocationSend>, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetInfo({assetGuid}: { assetGuid: number }): Promise<any> { return callThroughToRpc(arguments) },
-    assetNew({address, publicValue, contract, precision, supply, maxSupply, updateFlags, witness}: { address: string, publicValue: string, contract: string, precision: number, supply: number, maxSupply: number, updateFlags: number, witness: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetSend({assetGuid, addressTo, amount}: { assetGuid: number, addressTo: string, amount: number }): Promise<any> { return callThroughToRpc(arguments) },
-    assetSendMany({assetGuid, allocations, witness}: { assetGuid: number, allocations: Array<AssetAllocationSend>, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetTransfer({assetGuid, address, witness}: { assetGuid: number, address: string, witness: string }): Promise<any> { return callThroughToRpc(arguments) },
-    assetUpdate({assetGuid, publicValue, contract, supply, updateFlags, witness}: { assetGuid: number, publicValue: string, contract: string, supply: number, updateFlags: number, witness: string }): Promise<any> { return callThroughToRpc(arguments) },
-    convertAddress({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getBlockHashByTxid({txid}: { txid: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getGovernanceInfo(): Promise<any> { return callThroughToRpc(arguments) },
-    getSuperblockBudget({index}: { index: number }): Promise<any> { return callThroughToRpc(arguments) },
-    gObject({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },
-    listAssetAllocationMempoolBalances({count, from, query}: { count?: number, from?: number, query?: AssetAllocationBalanceQuery }): Promise<any> { return callThroughToRpc(arguments) },
-    listAssetAllocations({count, from, query}: { count?: number, from?: number, query?: AssetAllocationBalanceQueryWithGuid }): Promise<any> { return callThroughToRpc(arguments) },
-    listAssetIndex({page, options}: { page?: number, options?: ListAssetIndexOptions }): Promise<any> { return callThroughToRpc(arguments) },
-    listAssetIndexAllocations({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    listAssetIndexAssets({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    listAssets({count, from, options}: { count?: number, from?: number, options?: ListAssetOptions }): Promise<any> { return callThroughToRpc(arguments) },
-    masternode({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },
-    masternodeBroadcast({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },
-    masternodeList({mode, filter}: { mode?: string, filter?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    mnSync({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },
-    sentinelPing({version}: { version: number }): Promise<any> { return callThroughToRpc(arguments) },
-    spork({command}: { command: string }): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinBurn({fundingAddress, amount, ethAddress}: { fundingAddress: string, amount: number, ethAddress: string }): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinDecodeRawTransaction({hexString}: { hexString: number }): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinGetSpvProof({txid, blockHash}: { txid: string, blockHash?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinListReceivedByAddress({}: {}): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinMint({address, amount, blockNum, txHex, txRootHex, txMerkleProofHex, witness}: { address: string, amount: number, blockNum: number, txHex: string, txRootHex: string, txMerkleProofHex: string, witness?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinSetEthHeaders({headers}: { headers: EthHeaders }): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinSetEthStatus({syncStatus, highestBlock}: { syncStatus: string, highestBlock: number }): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinStartGeth({}: {}): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinStopGeth({}: {}): Promise<any> { return callThroughToRpc(arguments) },
-    syscoinTxFund({hexString, address, outputIndex}: { hexString: string, address: string, outputIndex: number }): Promise<any>{ return callThroughToRpc(arguments) },
-    tpsTestAdd({startTime, rawTxs}: { startTime, rawTxs?: Array<TpsRawTx> }): Promise<any> { return callThroughToRpc(arguments) },
-    tpsTestInfo({}: {}): Promise<any> { return callThroughToRpc(arguments) },
-    tpsTestSetEnabled({enabled}: { enabled: number }): Promise<any> { return callThroughToRpc(arguments) },
-    voteRaw({mnTxHash, mnTxIndex, govHash, votSignal, vote, time, voteSig}: { mnTxHash: string, mnTxIndex: number, govHash: string, votSignal: string, vote: string, time: number, voteSig: string }): Promise<any>{ return callThroughToRpc(arguments) },
+  // == Syscoin ==
+  addressBalance({address}: { address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetAllocationBalance({assetGuid, address}: { assetGuid: number, address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetAllocationBurn({assetGuid, address, amount, ethAddress}: { assetGuid: number, address: string, amount: number, ethAddress: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetAllocationInfo({assetGuid, address}: { assetGuid: number, address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetAllocationLock({assetGuid, addressFrom, txid, outputIndex, witness}: { assetGuid: number, addressFrom: string, txid: string, outputIndex: number, witness?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetAllocationMint({assetGuid, address, amount, blockNum, txHex, txRootHex, merkleProofHex, merkleProofPathHex, witness}: { assetGuid: number, address: string, amount: number, blockNum: number, txHex: string, txRootHex: string, merkleProofHex: string, merkleProofPathHex: string, witness?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetAllocationSend({assetGuid, addressFrom, addressTo, amount}: { assetGuid: number, addressFrom: string, addressTo: string, amount: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetAllocationSenderStatus({assetGuid, address, txid}: { assetGuid: number, address: string, txid: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetAllocationSendMany({assetGuid, addressFrom, allocations, witness}: { assetGuid: number, addressFrom: string, allocations: Array<AssetAllocationSend>, witness?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetInfo({assetGuid}: { assetGuid: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetNew({address, publicValue, contract, precision, supply, maxSupply, updateFlags, witness}: { address: string, publicValue: string, contract: string, precision: number, supply: number, maxSupply: number, updateFlags: number, witness: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetSend({assetGuid, addressTo, amount}: { assetGuid: number, addressTo: string, amount: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetSendMany({assetGuid, allocations, witness}: { assetGuid: number, allocations: Array<AssetAllocationSend>, witness?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetTransfer({assetGuid, address, witness}: { assetGuid: number, address: string, witness: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  assetUpdate({assetGuid, publicValue, contract, supply, updateFlags, witness}: { assetGuid: number, publicValue: string, contract: string, supply: number, updateFlags: number, witness: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  convertAddress({address}: { address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBlockHashByTxid({txid}: { txid: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getGovernanceInfo(): Promise<any> { return this.callThroughToRpc(arguments) };
+  getSuperblockBudget({index}: { index: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  gObject({command}: { command: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listAssetAllocationMempoolBalances({count, from, query}: { count?: number, from?: number, query?: AssetAllocationBalanceQuery }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listAssetAllocations({count, from, query}: { count?: number, from?: number, query?: AssetAllocationBalanceQueryWithGuid }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listAssetIndex({page, options}: { page?: number, options?: ListAssetIndexOptions }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listAssetIndexAllocations({address}: { address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listAssetIndexAssets({address}: { address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listAssets({count, from, options}: { count?: number, from?: number, options?: ListAssetOptions }): Promise<any> { return this.callThroughToRpc(arguments) };
+  masternode({command}: { command: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  masternodeBroadcast({command}: { command: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  masternodeList({mode, filter}: { mode?: string, filter?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  mnSync({command}: { command: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  sentinelPing({version}: { version: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  spork({command}: { command: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinBurn({fundingAddress, amount, ethAddress}: { fundingAddress: string, amount: number, ethAddress: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinDecodeRawTransaction({hexString}: { hexString: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinGetSpvProof({txid, blockHash}: { txid: string, blockHash?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinListReceivedByAddress({}: {}): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinMint({address, amount, blockNum, txHex, txRootHex, txMerkleProofHex, witness}: { address: string, amount: number, blockNum: number, txHex: string, txRootHex: string, txMerkleProofHex: string, witness?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinSetEthHeaders({headers}: { headers: EthHeaders }): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinSetEthStatus({syncStatus, highestBlock}: { syncStatus: string, highestBlock: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinStartGeth({}: {}): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinStopGeth({}: {}): Promise<any> { return this.callThroughToRpc(arguments) };
+  syscoinTxFund({hexString, address, outputIndex}: { hexString: string, address: string, outputIndex: number }): Promise<any>{ return this.callThroughToRpc(arguments) };
+  tpsTestAdd({startTime, rawTxs}: { startTime, rawTxs?: Array<TpsRawTx> }): Promise<any> { return this.callThroughToRpc(arguments) };
+  tpsTestInfo({}: {}): Promise<any> { return this.callThroughToRpc(arguments) };
+  tpsTestSetEnabled({enabled}: { enabled: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  voteRaw({mnTxHash, mnTxIndex, govHash, votSignal, vote, time, voteSig}: { mnTxHash: string, mnTxIndex: number, govHash: string, votSignal: string, vote: string, time: number, voteSig: string }): Promise<any>{ return this.callThroughToRpc(arguments) };
 
-    // == Util ==
-    createMultiSig({numberOfRequiredSignatures, keys, addressType}: { numberOfRequiredSignatures: number, keys: Array<string>, addressType?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    deriveAddress({descriptor, range}: { descriptor: string, range?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    estimateSmartFee({confTarget, estimateMode}: { confTarget: number, estimateMode?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getDescriptorInfo({descriptor}: { descriptor: string }): Promise<any> { return callThroughToRpc(arguments) },
-    signMessageWithPrivKey({privateKey, message}: { privateKey: string, message: string }): Promise<any> { return callThroughToRpc(arguments) },
-    validateAddress({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    verifyMessage({address, signature, message}: { address: string, signature: string, message: string }): Promise<any> { return callThroughToRpc(arguments) },
+  // == Util ==
+  createMultiSig({numberOfRequiredSignatures, keys, addressType}: { numberOfRequiredSignatures: number, keys: Array<string>, addressType?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  deriveAddress({descriptor, range}: { descriptor: string, range?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  estimateSmartFee({confTarget, estimateMode}: { confTarget: number, estimateMode?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getDescriptorInfo({descriptor}: { descriptor: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  signMessageWithPrivKey({privateKey, message}: { privateKey: string, message: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  validateAddress({address}: { address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  verifyMessage({address, signature, message}: { address: string, signature: string, message: string }): Promise<any> { return this.callThroughToRpc(arguments) };
 
-    // == Wallet ==
-    abandonTransaction({txid}: { txid: string }): Promise<any> { return callThroughToRpc(arguments) },
-    abortRescan(): Promise<any> { return callThroughToRpc(arguments) },
-    addMultiSigAddress({nRequired, keys, label, addressType}: { nRequired: number, keys: Array<string>, label?: string, addressType?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    backupWallet({destination}: { destination: string }): Promise<any> { return callThroughToRpc(arguments) },
-    bumpFee({txid, options}: { txid: string, options?: any }): Promise<any> { return callThroughToRpc(arguments) },
-    createWallet({walletName, disablePrivKeys}: { walletName: string, disablePrivKeys: number }): Promise<any> { return callThroughToRpc(arguments) },
-    dumpPrivKey({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    dumpWallet({fileName}: { fileName: string }): Promise<any> { return callThroughToRpc(arguments) },
-    encryptWallet({passphrase}: { passphrase: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getAddressesByLabel({label}: { label: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getAddressInfo({address}: { address: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getBalance({dummy, minconf, includeWatchOnly}: { dummy?: string, minconf: number, includeWatchOnly: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getNewAddress({label, addressType}: { label: string, addressType: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getRawChangeAddress({addressType}: { addressType?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    getReceivedByAddress({address, minConf}: { address: string, minConf?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getReceivedByLabel({label, minConf}: { label: string, minConf?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getTransaction({txid, includeWatchOnly}: { txid: string, includeWatchOnly: number }): Promise<any> { return callThroughToRpc(arguments) },
-    getUnconfirmedBalance({}: {}): Promise<any>{ return callThroughToRpc(arguments) },
-    getWalletInfo({}: {}): Promise<any>{ return callThroughToRpc(arguments) },
-    importAddress({address, label, rescan, p2sh}: { address: string, label?: string, rescan?: number, p2sh?: number }): Promise<any>{ return callThroughToRpc(arguments) },
-    importMulti({requests, options}: { requests: string, options: any }): Promise<any> { return callThroughToRpc(arguments) },
-    importPrivKey({key, label, rescan}: { key: string, label?: string, rescan?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    importPrunedFunds({rawTx, txOutProof}: { rawTx: string, txOutProof: string }): Promise<any> { return callThroughToRpc(arguments) },
-    importPubKey({pubKey, label, rescan}: { pubKey: string, label?: string, rescan?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    importWallet({fileName}: { fileName: string }): Promise<any>{ return callThroughToRpc(arguments) },
-    keypoolRefill({newSize}: { newSize?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    listAddressGroupings({}: {}): Promise<any>{ return callThroughToRpc(arguments) },
-    listLabels({purpose}: { purpose?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    listLockUnspent({}: {}): Promise<any> { return callThroughToRpc(arguments) },
-    listReceivedByAddress({minConf, includeEmpty, includeWatchOnly, addressFilter}: { minConf?: number, includeEmpty?: number, includeWatchOnly?: number, addressFilter?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    listReceivedByLabel({minConf, includeEmpty, includeWatchOnly}: { minConf?: number, includeEmpty?: number, includeWatchOnly?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    listSinceBlock({blockHash, targetConfs, includeWatchOnly, includeRemoved}: { blockHash?: string, targetConfs?: number, includeWatchOnly?: number, includeRemoved?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    listTransactions({label, count, skip, includeWatchOnly}: { label?: string, count?: number, skip?: number, includeWatchOnly?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    listUnspent({minConf, maxConf, addresses, includeUnsafe, query, options}: { minConf?: number, maxConf?: number, addresses?: Array<string>, includeUnsafe?: number, query?: any, options?: any }): Promise<any> { return callThroughToRpc(arguments) },
-    listWalletDir({}: {}): Promise<any> { return callThroughToRpc(arguments) },
-    listWallets({}: {}): Promise<any> { return callThroughToRpc(arguments) },
-    loadWallet({fileName}: { fileName: string }): Promise<any> { return callThroughToRpc(arguments) },
-    lockUnspent({unlock, txs}: { unlock: number, txs?: Array<{ txid: string, vout: number }> }): Promise<any> { return callThroughToRpc(arguments) },
-    removePrunedFunds({txid}: { txid: string }): Promise<any> { return callThroughToRpc(arguments) },
-    rescanBlockchain({start, stop}: { start?: number, stop?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    sendMany({dummy, amounts, minConf, comment, subtractFeeFrom, replaceable, confTarget, estimateMode}: { dummy: string, amounts: Array<{ [address: string]: number }>, minConf?: number, comment?: string, subtractFeeFrom?: Array<string>, replaceable?: boolean, confTarget?: number, estimateMode?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    sendToAddress({address, amount, minConf, comment, comment_to, subtractFeeFromAmount, replaceable, confTarget, estimateMode}: { address: string, amount: number, minConf?: number, comment?: string, comment_to?: string, subtractFeeFromAmount?: number, replaceable?: boolean, confTarget?: number, estimateMode?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    setHdSeed({newKeyPool, seed}: { newKeyPool?: number, seed?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    setLabel({address, label}: { address: string, label: string }): Promise<any> { return callThroughToRpc(arguments) },
-    setTxFee({amount}: { amount: number }): Promise<any> { return callThroughToRpc(arguments) },
-    signMessage({address, message}: { address: string, message: string }): Promise<any> { return callThroughToRpc(arguments) },
-    signRawTransactionWithWallet({hexString, rawTxs, sigHashType}: { hexString: string, rawTxs?: Array<RawTx>, sigHashType?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    unloadWallet({walletName}: { walletName?: string }): Promise<any> { return callThroughToRpc(arguments) },
-    walletCreateFundedPsbt({txs, amounts, lockTime, options, bip32derivs}: { txs: any, amounts: any, lockTime?: any, options?: any, bip32derivs?: any }): Promise<any> { return callThroughToRpc(arguments) },
-    walletLock({}: {}): Promise<any> { return callThroughToRpc(arguments) },
-    walletPassphrase({passphrase, timeout}: { passphrase: string, timeout: number }): Promise<any> { return callThroughToRpc(arguments) },
-    walletPassphraseChange({oldPass, newPass}: { oldPass: string, newPass: string }): Promise<any> { return callThroughToRpc(arguments) },
-    walletProcessPsbt({pbst, sign, sigHashType, bip32derivs}: { pbst: string, sign?: number, sigHashType?: string, bip32derivs?: number }): Promise<any> { return callThroughToRpc(arguments) },
-    // @formatter:on
-
-    callThroughToRpc //exposed for unit testing
-  };
-
-  function callThroughToRpc(args): Promise<any> {
-    let argArr: Array<any> = Array.prototype.slice.call(args);
-
-    //expect arg array to be a single object
-    if(argArr.length > 1 && typeof argArr[0] !== 'object') {
-      throw new Error(`callThroughToRpc received unknown params: ${JSON.stringify(argArr)}`);
-    }
-
-    let paramArr = [];
-    if(argArr.length > 0) {
-      //get the ordered keys of the object
-      let argObj = argArr[0];
-      let orderedKeys = Reflect.ownKeys(argObj);
-
-      //create an ordered array of just values
-      paramArr = orderedKeys.map((value, index, arr) => argObj[value]);
-    }
-
-    return callRpc(args.callee.name.toLowerCase(), paramArr);
-  }
+  // == Wallet ==
+  abandonTransaction({txid}: { txid: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  abortRescan(): Promise<any> { return this.callThroughToRpc(arguments) };
+  addMultiSigAddress({nRequired, keys, label, addressType}: { nRequired: number, keys: Array<string>, label?: string, addressType?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  backupWallet({destination}: { destination: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  bumpFee({txid, options}: { txid: string, options?: any }): Promise<any> { return this.callThroughToRpc(arguments) };
+  createWallet({walletName, disablePrivKeys}: { walletName: string, disablePrivKeys: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  dumpPrivKey({address}: { address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  dumpWallet({fileName}: { fileName: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  encryptWallet({passphrase}: { passphrase: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getAddressesByLabel({label}: { label: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getAddressInfo({address}: { address: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getBalance({dummy, minconf, includeWatchOnly}: { dummy?: string, minconf: number, includeWatchOnly: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getNewAddress({label, addressType}: { label: string, addressType: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getRawChangeAddress({addressType}: { addressType?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getReceivedByAddress({address, minConf}: { address: string, minConf?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getReceivedByLabel({label, minConf}: { label: string, minConf?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getTransaction({txid, includeWatchOnly}: { txid: string, includeWatchOnly: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  getUnconfirmedBalance({}: {}): Promise<any>{ return this.callThroughToRpc(arguments) };
+  getWalletInfo(): Promise<any>{ return this.callThroughToRpc(arguments) };
+  importAddress({address, label, rescan, p2sh}: { address: string, label?: string, rescan?: number, p2sh?: number }): Promise<any>{ return this.callThroughToRpc(arguments) };
+  importMulti({requests, options}: { requests: string, options: any }): Promise<any> { return this.callThroughToRpc(arguments) };
+  importPrivKey({key, label, rescan}: { key: string, label?: string, rescan?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  importPrunedFunds({rawTx, txOutProof}: { rawTx: string, txOutProof: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  importPubKey({pubKey, label, rescan}: { pubKey: string, label?: string, rescan?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  importWallet({fileName}: { fileName: string }): Promise<any>{ return this.callThroughToRpc(arguments) };
+  keypoolRefill({newSize}: { newSize?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listAddressGroupings({}: {}): Promise<any>{ return this.callThroughToRpc(arguments) };
+  listLabels({purpose}: { purpose?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listLockUnspent({}: {}): Promise<any> { return this.callThroughToRpc(arguments) };
+  listReceivedByAddress({minConf, includeEmpty, includeWatchOnly, addressFilter}: { minConf?: number, includeEmpty?: number, includeWatchOnly?: number, addressFilter?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listReceivedByLabel({minConf, includeEmpty, includeWatchOnly}: { minConf?: number, includeEmpty?: number, includeWatchOnly?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listSinceBlock({blockHash, targetConfs, includeWatchOnly, includeRemoved}: { blockHash?: string, targetConfs?: number, includeWatchOnly?: number, includeRemoved?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listTransactions({label, count, skip, includeWatchOnly}: { label?: string, count?: number, skip?: number, includeWatchOnly?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listUnspent({minConf, maxConf, addresses, includeUnsafe, query, options}: { minConf?: number, maxConf?: number, addresses?: Array<string>, includeUnsafe?: number, query?: any, options?: any }): Promise<any> { return this.callThroughToRpc(arguments) };
+  listWalletDir({}: {}): Promise<any> { return this.callThroughToRpc(arguments) };
+  listWallets({}: {}): Promise<any> { return this.callThroughToRpc(arguments) };
+  loadWallet({fileName}: { fileName: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  lockUnspent({unlock, txs}: { unlock: number, txs?: Array<{ txid: string, vout: number }> }): Promise<any> { return this.callThroughToRpc(arguments) };
+  removePrunedFunds({txid}: { txid: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  rescanBlockchain({start, stop}: { start?: number, stop?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  sendMany({dummy, amounts, minConf, comment, subtractFeeFrom, replaceable, confTarget, estimateMode}: { dummy: string, amounts: Array<{ [address: string]: number }>, minConf?: number, comment?: string, subtractFeeFrom?: Array<string>, replaceable?: boolean, confTarget?: number, estimateMode?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  sendToAddress({address, amount, minConf, comment, comment_to, subtractFeeFromAmount, replaceable, confTarget, estimateMode}: { address: string, amount: number, minConf?: number, comment?: string, comment_to?: string, subtractFeeFromAmount?: number, replaceable?: boolean, confTarget?: number, estimateMode?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  setHdSeed({newKeyPool, seed}: { newKeyPool?: number, seed?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  setLabel({address, label}: { address: string, label: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  setTxFee({amount}: { amount: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  signMessage({address, message}: { address: string, message: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  signRawTransactionWithWallet({hexString, rawTxs, sigHashType}: { hexString: string, rawTxs?: Array<RawTx>, sigHashType?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  unloadWallet({walletName}: { walletName?: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  walletCreateFundedPsbt({txs, amounts, lockTime, options, bip32derivs}: { txs: any, amounts: any, lockTime?: any, options?: any, bip32derivs?: any }): Promise<any> { return this.callThroughToRpc(arguments) };
+  walletLock({}: {}): Promise<any> { return this.callThroughToRpc(arguments) };
+  walletPassphrase({passphrase, timeout}: { passphrase: string, timeout: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  walletPassphraseChange({oldPass, newPass}: { oldPass: string, newPass: string }): Promise<any> { return this.callThroughToRpc(arguments) };
+  walletProcessPsbt({pbst, sign, sigHashType, bip32derivs}: { pbst: string, sign?: number, sigHashType?: string, bip32derivs?: number }): Promise<any> { return this.callThroughToRpc(arguments) };
+  // @formatter:on
 }
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"syscoin-js\",\n  \"version\": \"3.1.0\",\n  \"description\": \"Javascript SDK for the Syscoin cryptocurrency.\",\n  \"main\": \"dist/index.js\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"test\": \"node dist/test.js\",\n    \"build-test\": \"npm run build && npm run test\",\n    \"webpack\": \"webpack\",\n    \"start:dev\": \"webpack-dev-server\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syscoin/syscoin-js.git\"\n  },\n  \"keywords\": [\n    \"syscoin\",\n    \"javascript\"\n  ],\n  \"author\": \"Blockchain Foundry\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/syscoin/syscoin-js/issues\"\n  },\n  \"homepage\": \"https://github.com/syscoin/syscoin-js#readme\",\n  \"dependencies\": {\n    \"@types/node\": \"^12.0.1\",\n    \"axios\": \"^0.18.0\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"typescript\": \"^3.4.5\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^24.0.13\",\n    \"jest\": \"^24.8.0\",\n    \"ts-jest\": \"^24.0.2\",\n    \"ts-loader\": \"^6.0.0\",\n    \"webpack\": \"^4.31.0\",\n    \"webpack-cli\": \"^3.3.2\",\n    \"webpack-dev-server\": \"^3.3.1\"\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ package.json	(date 1558122149000)
@@ -5,7 +5,7 @@
   "main": "dist/index.js",
   "scripts": {
     "build": "tsc",
-    "test": "node dist/test.js",
+    "test": "node dist/node-test.js",
     "build-test": "npm run build && npm run test",
     "webpack": "webpack",
     "start:dev": "webpack-dev-server"
Index: src/node-test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import config from \"./config\";\nimport { SyscoinRpcClient } from \"./SyscoinRpcClient\";\nimport { rpcServices } from \"./rpcServices\";\n\nlet client = new SyscoinRpcClient(config);\n\nlet info = rpcServices(client.callRpc).getBestBlockHash().then((info) => {\n  console.log(\"res:\", info);\n});\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/node-test.ts	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ src/node-test.ts	(date 1558121366000)
@@ -1,10 +1,11 @@
 import config from "./config";
 import { SyscoinRpcClient } from "./SyscoinRpcClient";
-import { rpcServices } from "./rpcServices";
+import { RPCServices } from "./RPCServices";
 
 let client = new SyscoinRpcClient(config);
+let rpcServices = new RPCServices(client.callRpc);
 
-let info = rpcServices(client.callRpc).getBestBlockHash().then((info) => {
+let info = rpcServices.getBestBlockHash().then((info) => {
   console.log("res:", info);
 });
 
Index: dist/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./SyscoinRpcClient\"));\n__export(require(\"./rpcServices\"));\n//# sourceMappingURL=index.js.map
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/index.js	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ dist/index.js	(date 1558122134000)
@@ -3,5 +3,5 @@
 }
 Object.defineProperty(exports, "__esModule", { value: true });
 __export(require("./SyscoinRpcClient"));
-__export(require("./rpcServices"));
+__export(require("./RPCServices"));
 //# sourceMappingURL=index.js.map
\ No newline at end of file
Index: dist/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from \"./SyscoinRpcClient\";\nexport * from \"./rpcServices\";\nexport interface RawTx {\n    txid: string;\n    vout: number;\n    scriptPubKey: string;\n    redeemScript: string;\n    witnessScript: string;\n    amount: number;\n}\nexport interface AssetAllocationSend {\n}\nexport interface AssetAllocationBalanceQuery {\n    addresses: Array<string>;\n}\nexport interface AssetAllocationBalanceQueryWithGuid extends AssetAllocationBalanceQuery {\n    assetGuid: number;\n}\nexport interface ListAssetIndexOptions {\n    assetGuid: number;\n    address: string;\n}\nexport interface ListAssetOptions {\n    txid: string;\n    assetGuid: number;\n    addresses: Array<string>;\n}\nexport interface EthHeaders {\n    headers: Array<EthHeader>;\n}\nexport interface EthHeader {\n    blockNum: number;\n    txRoot: string;\n}\nexport interface TpsRawTx {\n    tx: string;\n}\nexport interface TxHeader {\n    txid: string;\n    vout: number;\n    sequence: number;\n}\nexport interface PbstPayloadInfo {\n    address?: number;\n    data?: string;\n}\nexport interface Transaction {\n    txid: string;\n    vout: number;\n    scriptPubKey: string;\n    redeemScript: string;\n    witnessScript: string;\n    amount: number;\n}\nexport interface RpcConfigOptions {\n    host: string;\n    rpcPort: number;\n    username: string;\n    password: string;\n    useSsl?: boolean;\n    timeout?: number;\n    customHttpAgent?: any;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/index.d.ts	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ dist/index.d.ts	(date 1558122134000)
@@ -1,5 +1,5 @@
 export * from "./SyscoinRpcClient";
-export * from "./rpcServices";
+export * from "./RPCServices";
 export interface RawTx {
     txid: string;
     vout: number;
Index: _tests_/unit/rpc-services.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { rpcServices } from \"../../src/rpcServices\";\n\ndescribe('RPC Services Tests', () => {\n\n  describe('callThroughToRpc', () => {\n    let mockRpc = (method, args) => {\n      return {method, args};\n    };\n    let callThru = rpcServices(mockRpc).callThroughToRpc;\n\n    //requires non-anonymous function\n    function someRpcMethod(paramA?) { return callThru(arguments); }\n\n    it('callThroughToRpc parses the arguments object correctly', async () => {\n      let result = await someRpcMethod({propA: \"A\", propB: \"B\"});\n      expect(result.method).toBe('somerpcmethod');\n      expect(result.args[0]).toBe('A');\n      expect(result.args[1]).toBe('B');\n    });\n\n    it('callThroughToRpc should work with no params passed', async () => {\n      let result = await someRpcMethod();\n      expect(result.method).toBe('somerpcmethod');\n    });\n  });\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- _tests_/unit/rpc-services.test.ts	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ _tests_/unit/rpc-services.test.ts	(date 1558122050000)
@@ -1,4 +1,4 @@
-import { rpcServices } from "../../src/rpcServices";
+import { RPCServices } from "../../src/RPCServices";
 
 describe('RPC Services Tests', () => {
 
@@ -6,10 +6,10 @@
     let mockRpc = (method, args) => {
       return {method, args};
     };
-    let callThru = rpcServices(mockRpc).callThroughToRpc;
+    let rpcServices = new RPCServices(mockRpc);
 
     //requires non-anonymous function
-    function someRpcMethod(paramA?) { return callThru(arguments); }
+    function someRpcMethod(paramA?) { return rpcServices.callThroughToRpc(arguments); }
 
     it('callThroughToRpc parses the arguments object correctly', async () => {
       let result = await someRpcMethod({propA: "A", propB: "B"});
Index: dist/rpcServices.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"version\":3,\"file\":\"rpcServices.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/rpcServices.ts\"],\"names\":[],\"mappings\":\"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\"}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/rpcServices.js.map	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ dist/rpcServices.js.map	(date 1558122134000)
@@ -1,1 +1,1 @@
-{"version":3,"file":"rpcServices.js","sourceRoot":"","sources":["../src/rpcServices.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"RPCServices.js","sourceRoot":"","sources":["../src/RPCServices.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
Index: dist/node-test.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"version\":3,\"file\":\"node-test.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/node-test.ts\"],\"names\":[],\"mappings\":\";AAAA,mCAA8B;AAC9B,uDAAsD;AACtD,6CAA4C;AAE5C,IAAI,MAAM,GAAG,IAAI,mCAAgB,CAAC,gBAAM,CAAC,CAAC;AAE1C,IAAI,IAAI,GAAG,yBAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;IAClE,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC\"}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/node-test.js.map	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ dist/node-test.js.map	(date 1558122134000)
@@ -1,1 +1,1 @@
-{"version":3,"file":"node-test.js","sourceRoot":"","sources":["../src/node-test.ts"],"names":[],"mappings":";AAAA,mCAA8B;AAC9B,uDAAsD;AACtD,6CAA4C;AAE5C,IAAI,MAAM,GAAG,IAAI,mCAAgB,CAAC,gBAAM,CAAC,CAAC;AAE1C,IAAI,IAAI,GAAG,yBAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;IAClE,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"node-test.js","sourceRoot":"","sources":["../src/node-test.ts"],"names":[],"mappings":";AAAA,mCAA8B;AAC9B,uDAAsD;AACtD,6CAA4C;AAE5C,IAAI,MAAM,GAAG,IAAI,mCAAgB,CAAC,gBAAM,CAAC,CAAC;AAC1C,IAAI,WAAW,GAAG,IAAI,yBAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAElD,IAAI,IAAI,GAAG,WAAW,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;IAClD,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC"}
\ No newline at end of file
Index: dist/node-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Object.defineProperty(exports, \"__esModule\", { value: true });\nvar config_1 = require(\"./config\");\nvar SyscoinRpcClient_1 = require(\"./SyscoinRpcClient\");\nvar rpcServices_1 = require(\"./rpcServices\");\nvar client = new SyscoinRpcClient_1.SyscoinRpcClient(config_1.default);\nvar info = rpcServices_1.rpcServices(client.callRpc).getBestBlockHash().then(function (info) {\n    console.log(\"res:\", info);\n});\n//# sourceMappingURL=node-test.js.map
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/node-test.js	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ dist/node-test.js	(date 1558122134000)
@@ -1,9 +1,10 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 var config_1 = require("./config");
 var SyscoinRpcClient_1 = require("./SyscoinRpcClient");
-var rpcServices_1 = require("./rpcServices");
+var RPCServices_1 = require("./RPCServices");
 var client = new SyscoinRpcClient_1.SyscoinRpcClient(config_1.default);
-var info = rpcServices_1.rpcServices(client.callRpc).getBestBlockHash().then(function (info) {
+var rpcServices = new RPCServices_1.RPCServices(client.callRpc);
+var info = rpcServices.getBestBlockHash().then(function (info) {
     console.log("res:", info);
 });
 //# sourceMappingURL=node-test.js.map
\ No newline at end of file
Index: src/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from \"./SyscoinRpcClient\"\nexport * from \"./rpcServices\"\n\nexport interface RawTx {\n  txid: string;\n  vout: number;\n  scriptPubKey: string;\n  redeemScript: string;\n  witnessScript: string;\n  amount: number;\n}\n\n\nexport interface AssetAllocationSend {\n  //TODO: what does this thing look like? Ask Jag.\n}\n\nexport interface AssetAllocationBalanceQuery {\n  addresses: Array<string>;\n}\n\nexport interface AssetAllocationBalanceQueryWithGuid extends AssetAllocationBalanceQuery {\n  assetGuid: number;\n}\n\nexport interface ListAssetIndexOptions {\n  assetGuid: number;\n  address: string; //TODO: can be one or more\n}\n\nexport interface ListAssetOptions {\n  txid: string;\n  assetGuid: number;\n  addresses: Array<string>;\n}\n\nexport interface EthHeaders {\n  headers: Array<EthHeader>;\n}\n\nexport interface EthHeader {\n  blockNum: number;\n  txRoot: string;\n}\n\nexport interface TpsRawTx {\n  tx: string;\n}\n\nexport interface TxHeader {\n  txid: string;\n  vout: number;\n  sequence: number;\n}\n\nexport interface PbstPayloadInfo {\n  address?: number;\n  data?: string;\n}\n\nexport interface Transaction {\n  txid: string;\n  vout: number;\n  scriptPubKey: string;\n  redeemScript: string;\n  witnessScript: string;\n  amount: number;\n}\n\nexport interface RpcConfigOptions {\n  host: string;\n  rpcPort: number;\n  username: string;\n  password: string;\n  useSsl?: boolean;\n  timeout?: number;\n  customHttpAgent?: any;\n}\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/index.ts	(revision 507abd75ed5ea1d96acf1545c54eb5e4200a5a3b)
+++ src/index.ts	(date 1558121295000)
@@ -1,5 +1,5 @@
 export * from "./SyscoinRpcClient"
-export * from "./rpcServices"
+export * from "./RPCServices"
 
 export interface RawTx {
   txid: string;
